from tkinter import *
import tkinter.tix as ti
from tkinter import ttk as tt
from tkinter import BitmapImage
from tkinter import messagebox as msg

import sqlite3 as sq3
import webbrowser as web
from datetime import *

import os as o
import sys as sy
import base64 as b64

from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
from reportlab.lib.styles import ParagraphStyle
from reportlab.platypus import Paragraph
from reportlab.lib.enums import TA_JUSTIFY, TA_LEFT, TA_CENTER, TA_RIGHT

ventana_janela = ti.Tk()

try:
    program_directory=sy.path[0]
    ventana_janela.iconphoto(True, PhotoImage(file=o.path.join(program_directory, "A.png")))
except:
    b = ""
    bb = b64.b64decode(b)
    ventana_janela.iconphoto(True, PhotoImage(data=bb))

color_background = '#008080'
color_frame =  '#F0FFFF'
color_bord = '#836FFF'
color_label = '#F0FFFF'
color_buton_press = '#20B2AA'

class Anotações():
    def teste0(self, evt):
        self.entry_anotações.delete(0,END)
        self.value2=str((self.listbox.get(ANCHOR)))
        self.valor_list = self.value2
        self.entry_anotações.insert(END,self.valor_list)

    def variaveis2(self):
        self.cod2 = self.entry_cod2.get()
        self.anotaçoes = self.entry_anotações.get()

        self.anotaçoes = self.anotaçoes.lower().capitalize()

    def quebra_linha_line_breaking (self):
        self.variaveis2()

        s = f'{self.anotaçoes}!@#$'

        self.entry_anotações.delete(0, END)
        self.entry_anotações.insert(0, s)
        
    def deletar_dados(self):
        self.variaveis2()
        codigo = self.entry_cod2.get()

        if codigo == "":
            mensagem = msg.showwarning("Aviso de ERRO:", "para deletar uma anotação, você, deve digitar um código válido.")
        else:
            if codigo != "":
                self.conecta_banco_d_dados()
                self.cursor.execute( """ SELECT * FROM clientes WHERE cod LIKE '%s' """% codigo)

                tratamento = self.cursor.fetchall()

                for i in tratamento:
                    recolhendo_dados = i[7]
                    recolhendo_dados = str(recolhendo_dados).rstrip(" ").replace('None', "") # Recolhe os dados pré-tratados, ele já retiravalores None e substitui por um espaço.
                    recolhendo_dados2 = i[8]
                    recolhendo_dados2 = str(recolhendo_dados2).replace('None', "").rstrip(' ')
                self.desconecta_banco_d_dados()

                lista_de_anotações1 = recolhendo_dados
                lista_de_anotações1 = lista_de_anotações1.split("¢") # Converte os dados pré-tratados pra uma lista
                
                lista_de_anotações2 = recolhendo_dados2
                lista_de_anotações2 = lista_de_anotações2.split("¢")

                s = {""}
                lista_de_anotações_2 = [e for e in lista_de_anotações1 if e not in s] # Retira da lista os espaços em vazio que estavam como item
                lista_de_anotações_3 = [e for e in lista_de_anotações2 if e not in s]
                
                if self.anotaçoes == '':
                    mensagem = msg.showinfo('Aviso de ERRO:', 'Para "deletar" uma anotação, você, deve selecionar qual deseja deletar.')
                else:
                    if self.anotaçoes != '':
                        item_a_ser_apagado = self.valor_list
                        cont = 0
                        try:
                            localiza_item_a_ser_apagado = lista_de_anotações_2.index(item_a_ser_apagado)
                            cont = 5
                        except:
                            mensagem = msg.showinfo('Aviso de ERRO:', 'Para "deletar" uma anotação, você, deve selecionar qual deseja deletar.')
                        if cont == 5:
                            lista_de_anotações_2.remove(lista_de_anotações_2[localiza_item_a_ser_apagado])
                            recolhendo_dados_2 = "¢".join([str(a) for a in lista_de_anotações_2])

                            lista_de_anotações_3.remove(lista_de_anotações_3[localiza_item_a_ser_apagado])
                            recolhendo_dados_3 = "¢".join([str(a) for a in lista_de_anotações_3])
                            
                            self.conecta_banco_d_dados()
                            self.cursor.execute(""" UPDATE clientes SET note = ?, data = ? WHERE cod = ?""", (recolhendo_dados_2,recolhendo_dados_3,codigo))
                            self.conecta.commit()
                            self.desconecta_banco_d_dados()
                            cont, item_a_ser_apagado, i = 0,0,0
        self.listabox_limpa()                   

    def inserir_dados(self):
        self.variaveis2()
        self.conecta_banco_d_dados()
        codigo = self.entry_cod2.get()
        if codigo != '':
            self.cursor.execute( """ SELECT * FROM clientes
            WHERE cod LIKE '%s' """% codigo)
        
        tratamento = self.cursor.fetchall()

        for resultado in tratamento:
            recolhendo_dados = resultado[7]
            recolhendo_dados = str(recolhendo_dados).replace('None', '')
            recolhendo_dados2 = resultado[8]
            recolhendo_dados2 = str(recolhendo_dados2).replace('None', '')


        self.desconecta_banco_d_dados()

        if codigo == '':
            mensagem = msg.showinfo('Aviso:', 'Você deve "escrever" um Código valído!', icon = 'warning')
        else:
            if codigo != '':
                if recolhendo_dados in  '':
                    if recolhendo_dados2 == '' :
                        anotação = self.anotaçoes
                        data = datetime.today()
                        data = data.strftime('%d/%m/%Y %H:%M:%S')
                        if anotação != '':
                            anotação = f'{anotação}¢'
                            data = f'{data}¢'
                            self.conecta_banco_d_dados()
                            self.cursor.execute(""" UPDATE clientes SET note =?, data =? WHERE cod = ?""", (anotação, data, codigo))
                            self.conecta.commit()
                            self.desconecta_banco_d_dados()
                        else:
                            if anotação == "":
                                mensagem = msg.showinfo('Aviso:','Você deve "escrever" algo no campo Anotações!',icon = 'warning')
                else:
                    if recolhendo_dados != '':
                        if recolhendo_dados2 != '' :
                            anotação = self.anotaçoes
                            data = datetime.today()
                            data = data.strftime('%d/%m/%Y %H:%M:%S')
                            if anotação != "":
                                anotação = f"{recolhendo_dados}{anotação}¢"
                                data = f'{recolhendo_dados2}{data}¢'
                                self.conecta_banco_d_dados()
                                self.cursor.execute(""" UPDATE clientes SET note =?, data =? WHERE cod = ?""", (anotação, data, codigo))
                                self.conecta.commit()
                                self.desconecta_banco_d_dados()
                            else:
                                if anotação == "":
                                    mensagem = msg.showinfo('Aviso:', 'Você deve "escrever" algo no campo Anotações!', icon = 'warning')
            
        self.listabox_limpa()

    def listabox_alterar(self):
        self.variaveis2()
        codigo = self.entry_cod2.get()

        if codigo == '':
            mensagem = msg.showwarning("Aviso de ERRO:", "Você precisa digitar um código!".upper())
        else:
            if codigo != "":

                self.conecta_banco_d_dados()
                self.cursor.execute( """ SELECT * FROM clientes WHERE cod LIKE '%s' """% codigo)

                tratamento = self.cursor.fetchall()

                for i in tratamento:
                    recolhendo_dados = i[7]
                    recolhendo_dados = str(recolhendo_dados).rstrip(" ").replace('None', "") # Recolhe os dados pré-tratados, ele já retiravalores None e substitui por um espaço.
                    recolhendo_dados2 = i[8]
                    recolhendo_dados2 = str(recolhendo_dados2).rstrip(" ").replace('None', "")
                self.desconecta_banco_d_dados()

                lista_de_anotações = recolhendo_dados
                lista_de_anotações = lista_de_anotações.split("¢") # Converte os dados pré-tratados pra uma lista

                lista_de_anotações2 = recolhendo_dados2
                lista_de_anotações2 = lista_de_anotações2.split("¢")

                s = {""}
                lista_de_anotações_2 = [e for e in lista_de_anotações if e not in s] # Retira da lista os espaços em vazio que estavam como item
                lista_de_anotações_3 = [l for l in lista_de_anotações2 if l not in s]

                
                if self.anotaçoes != '':
                    items_alterando = self.valor_list
                    cont = 0

                    data = datetime.today()
                    data = data.strftime('%d/%m/%Y %H:%M:%S')

                    try:
                        pesquisando_items_alterando = lista_de_anotações_2.index(items_alterando)
                        print(pesquisando_items_alterando)
                        cont = 5
                    except:
                        mensagem = msg.showinfo("Aviso:", 'Para "alterar" dados, deve selecionar um válido!'.upper(), icon = 'warning')
                    
                    ss = pesquisando_items_alterando
                    pesquisando_items_alterando2 = ss
                    print(pesquisando_items_alterando2)
                    
                    if cont == 5:
                        lista_de_anotações_2[pesquisando_items_alterando] = self.anotaçoes
                        recolhendo_dados_2 = "¢".join([str(d) for d in lista_de_anotações_2]) 

                        lista_de_anotações_3[pesquisando_items_alterando2] = data
                        print(lista_de_anotações_3)
                        recolhendo_dados_3 = "¢".join([str(d) for d in lista_de_anotações_3])
                        print(recolhendo_dados_3) 

                        self.conecta_banco_d_dados()
                        self.cursor.execute(""" UPDATE clientes SET note = ?, data =? WHERE cod = ?""", (recolhendo_dados_2, recolhendo_dados_3,codigo))
                        self.conecta.commit()
                        self.desconecta_banco_d_dados()

                        cont, items_alterando, data = 0,0,0

                else:
                    if self.anotaçoes == '':
                        mensagem = msg.showinfo("Aviso:", 'Para "alterar" dados, deve selecionar um!'.upper(), icon = 'warning')
                

                self.listabox_limpa()
    
    def listabox_limpa(self):
        self.limpa_1 = self.entry_cod2.delete(0, END)
        self.limpa_2 = self.entry_anotações.delete(0, END)
        self.limpa_3 = self.listbox.delete(0, END)

    def listabox_busca(self):
        self.variaveis2()
        
        self.listbox.delete(0,END)
        codigo0 = self.entry_cod2.get()
        codigo0 = codigo0

        if self.cod2.isnumeric() and self.cod2 != "":
            self.conecta_banco_d_dados()

            self.entry_cod2.insert(END, "%")
            #self.entry_anotações.insert(END, "%")

            self.cursor.execute(
                """ SELECT note FROM clientes
                WHERE cod LIKE '%s' """% codigo0)

            tratamento = self.cursor.fetchall()

            for resultado in tratamento:
                resultado = str(resultado)
                resultado=resultado.replace("[", "")
                resultado=resultado.replace("]", "")
                resultado=resultado.replace("'","")
                resultado=resultado.replace(")", "")
                resultado=resultado.replace("(", "")
                resultado=resultado.rstrip(",")
                resultado=resultado.rstrip(" ")
                resultado=resultado.lstrip(" ")
                s = resultado.split("¢")
                ss = s[-1]
                if ss == '':
                    s.remove(ss)
                for xwz in s:
                    self.listbox.insert(END, xwz)
            
            self.desconecta_banco_d_dados()
            
            self.listbox.bind('<<ListboxSelect>>',self.teste0)
            
            if self.entry_cod2.get() == '0%':
                for x in range(0, 6+4):
                    self.listbox.insert(END, f"ERRO {x+1:2}, você deve aderir um código válido!")     
        else:
            if self.cod2.isalpha():
                for x in range(0, 6+4):
                    self.listbox.insert(END, f"ERRO {x+1:2}, você deve aderir um código!")
            elif self.entry_cod2.get() == '':
                for x in range(0, 6+4):
                    self.listbox.insert(END, f"ERRO {x+1:2}, você deve aderir um código válido!")
        self.entry_cod2.delete(0,END)
        self.entry_cod2.insert(END, codigo0)

    def baloes_anotaçoes(self):
        # CRIANDO BALÃO DA NOVA JANELA
        self.balao_buscar2 = ti.Balloon(self.frame3)
        msg_balão_buscar2 = 'Digite no campo \"CÓDIGO\", o código do cliente!\nE aperte aqui para buscar os dados!'
        self.balao_buscar2.subwidget('label')['image'] = BitmapImage()
        self.balao_buscar2.bind_widget(self.botao_buscar_2, balloonmsg=msg_balão_buscar2)

        self.balao_limpar2 = ti.Balloon(self.frame3)
        msg_balão_limpar2 = 'Clique aqui!\nCaso queira limpar as áreas de texto (entry)!'
        self.balao_limpar2.subwidget('label')['image'] = BitmapImage()
        self.balao_limpar2.bind_widget(self.botao_limpar_2, balloonmsg=msg_balão_limpar2)

        self.balao_novo2 = ti.Balloon(self.frame3)
        msg_balão_novo2 = 'Clique aqui!\nPara cadastrar ANOTAÇÕES!\nCaso já tenha preenchido o cadrastro (entry)!'
        self.balao_novo2.subwidget('label')['image'] = BitmapImage()
        self.balao_novo2.bind_widget(self.botao_novo_2, balloonmsg=msg_balão_novo2)

        self.balao_alterar2 =ti. Balloon(self.frame3)
        msg_balão_alterar2 = 'Clique aqui!\nCaso queria alterar algum dado da anotação!'
        self.balao_alterar2.subwidget('label')['image'] = BitmapImage()
        self.balao_alterar2.bind_widget(self.botao_alterar_2, balloonmsg=msg_balão_alterar2)

        self.balao_apagar2 = ti.Balloon(self.frame3)
        msg_balão_apagar2  = 'Clique aqui!\nDepois de ter selecionado a ANOTAÇÃO!\nCaso queria apaga-lá do programa!'
        self.balao_apagar2.subwidget('label')['image'] = BitmapImage()
        self.balao_apagar2.bind_widget(self.botao_apagar_2, balloonmsg=msg_balão_apagar2)

    def listabox(self):
        # LISTA BOX
        self.listbox = Listbox(self.frame3) 
        self.listbox.pack(side = BOTTOM, fill = BOTH) 
        self.listbox.place(rely=0.30, relx=0.25, relheight=0.50, relwidth=0.70)
        self.listbox.configure(bg=color_buton_press, fg="white", font=('arial',11,'bold'), highlightbackground=color_bord, highlightthickness=2, selectbackground=color_buton_press)

        # scrol:
        self.scrol_listabox = Scrollbar(self.frame3, orient='vertical')
        self.a = self.listbox
        self.a.configure(yscrollcommand=self.scrol_listabox.set)
        self.scrol_listabox.place(rely=0.30, relx=0.95, relwidth=0.035, relheight=0.5)
        self.scrol_listabox.config(command=self.a.yview)

        self.scrol_listabox2 = Scrollbar(self.frame3, orient='horizontal')
        self.b = self.listbox
        self.b.configure(xscrollcommand=self.scrol_listabox2.set)
        self.scrol_listabox2.place(rely=0.805, relx=0.25, relwidth=0.70, relheight=0.05)
        self.scrol_listabox2.config(command=self.b.xview)

    def janela_anotaçoes(self):
        # CRIADO NOVA JANELA
        self.ventana_janela_2 = Toplevel()
        self.ventana_janela_2.title('anotações de cliente'.title())
        self.ventana_janela_2.configure(background= color_background)
        self.ventana_janela_2.geometry('400x301')
        self.ventana_janela_2.resizable(False,False)
        """self.ventana_janela_2.maxsize(width=380, height=400)
        self.ventana_janela_2.minsize(width=320, height=300)"""
        self.ventana_janela_2.transient(self.ventana_janela)
        self.ventana_janela_2.focus_force() #impede de manuseiar a janela primária, coloca a nova sempre na frente
        self.ventana_janela_2.grab_set() #impede de anotar ou utilizar widgets da janela primária
        
        # CRIANDO UM NOVO FRAME
        self.frame3 = Frame(self.ventana_janela_2, bd= 4, bg=color_frame, highlightbackground=color_bord, highlightthickness=2)
        self.frame3.place(relx=0.01, rely=0.02, relwidth=0.98, relheight= 0.95)

        #CRIANDO BOTÕES NA NOVA JANELA
        self.botao_buscar_2= Button(self.frame3, text="buscar".title(), bg=color_background, fg='white', font=('verdana', 9), command=self.listabox_busca, activebackground=color_buton_press, activeforeground='white')
        self.botao_buscar_2.place(rely=0.24, relx=0.03, relwidth=0.13, relheight=0.12)
        
        self.botao_limpar_2= Button(self.frame3, text="limpar".title(), bg=color_background, fg='white', font=('verdana', 9), command=self.listabox_limpa, activebackground=color_buton_press, activeforeground='white')
        self.botao_limpar_2.place(relx=0.03, rely=0.85, relwidth=0.13, relheight=0.12)

        self.botao_novo_2= Button(self.frame3, text="novo".title(), bg=color_background, fg='white', font=('verdana', 9), command=self.inserir_dados, activebackground=color_buton_press, activeforeground='white')
        self.botao_novo_2.place(rely=0.39, relx=0.03, relwidth=0.13, relheight=0.12)

        self.botao_apagar_2= Button(self.frame3, text="apagar".title(), bg=color_background, fg='white', font=('verdana', 9), command=self.deletar_dados ,activebackground=color_buton_press, activeforeground='white')
        self.botao_apagar_2.place(rely=0.544, relx=0.03, relwidth=0.13, relheight=0.12)

        self.botao_alterar_2= Button(self.frame3, text="alterar".title(), bg=color_background, fg='white', font=('verdana', 9), command=self.listabox_alterar, activebackground=color_buton_press, activeforeground='white')
        self.botao_alterar_2.place(rely=0.693, relx=0.03, relwidth=0.13, relheight=0.12)

        self.botao_enter= Button(self.frame3, text="quebra linha".capitalize(), bg=color_frame, fg='gray', font=('verdana', 9), command=self.quebra_linha_line_breaking, activebackground=color_buton_press, activeforeground='blue')
        self.botao_enter.place(rely=0.001, relx=0.70, relwidth=0.25, relheight=0.14)

        # LABEL E ENTRY DA NOVA JANELA
        self.label_codigo2 = Label(self.frame3, text="código".upper(), bg=color_frame, fg= color_background, font=('arial',10,'bold'))
        self.label_codigo2.place(rely=0.01, relx=0.03)
        
        self.entry_cod2 = Entry(self.frame3, bg= color_label)
        self.entry_cod2.place(rely=0.12, relx=0.03, relheight=0.094, relwidth=0.15)

        self.label_anotações = Label(self.frame3, text="anotações".upper(), bg=color_frame, fg= color_background, font=('arial',10,'bold'))
        self.label_anotações.place(rely=0.01, relx=0.25)
    
        self.entry_anotações = Entry(self.frame3, bg= color_label)
        self.entry_anotações.place(rely=0.12, relx=0.25, relheight=0.10, relwidth=0.70)
        
        self.baloes_anotaçoes()
        self.listabox()
        
class Relatorios():
    def baloes_relatorios(self):
        # CRIANDO BALÃO DA NOVA JANELA
        self.balao_buscar3 = ti.Balloon(self.frame4)
        msg_balão_buscar3 = 'Digite no campo \"CÓDIGO\", o código do cliente!\nE aperte aqui para buscar os dados!'
        self.balao_buscar3.subwidget('label')['image'] = BitmapImage()
        self.balao_buscar3.bind_widget(self.botao_buscar_10, balloonmsg=msg_balão_buscar3)

        self.balao_limpar3 = ti.Balloon(self.frame4)
        msg_balão_limpar3 = 'Clique aqui!\nCaso queira fechar janela e não baixar dados!'
        self.balao_limpar3.subwidget('label')['image'] = BitmapImage()
        self.balao_limpar3.bind_widget(self.botao_cancelar, balloonmsg=msg_balão_limpar3)

        self.balao_novo3 = ti.Balloon(self.frame4)
        msg_balão_novo3 = 'Clique aqui!\nPara finalizar RELATÓRIO!\nCaso já tenha preenchido o cadrastro (entry e listbox)!'
        self.balao_novo3.subwidget('label')['image'] = BitmapImage()
        self.balao_novo3.bind_widget(self.botao_finalizar, balloonmsg=msg_balão_novo3)

        self.balao_listaBox = ti.Balloon(self.frame4)
        msg_balão_listaBox  = 'Clique aqui!\nDepois de ter preenchido o campo Código \ne apertado o botão Buscar!\nPara selecionar o cliente para o relatório!'
        self.balao_listaBox.subwidget('label')['image'] = BitmapImage()
        self.balao_listaBox.bind_widget(self.listbox2, balloonmsg=msg_balão_listaBox)

        self.balao_menuBox = ti.Balloon(self.frame4)
        msg_balão_menuBox  = 'Clique aqui!\nDepois de ter selecionado o cliente no listbox!\nPara selecionar o tipo do relatório!'
        self.balao_menuBox.subwidget('label')['image'] = BitmapImage()
        self.balao_menuBox.bind_widget(self.menu_listas_formado, balloonmsg=msg_balão_menuBox)

    def test1(self, *args):
        self.menu_seleção = str(self.variavel_d_armazenamento.get())

    def test0(self, evt):
        self.value=str((self.listbox2.get(ANCHOR)))

    def Quit2(self): 
        ms2 = msg.askquestion("Aviso: ", 'Deseja sair sem "baixar" os dados?'.capitalize(), icon = 'question')
        if ms2 == 'yes':
         self.ventana_janela_3.destroy()

    def menubox(self):
       self.menu_listas = ["GERAR EM PDF (.pdf)","GERAR EM DOC (.doc)"]

       self.variavel_d_armazenamento = StringVar(self.ventana_janela_3)
       self.variavel_d_armazenamento.set(self.menu_listas[0])

       self.menu_listas_formado = OptionMenu(self.ventana_janela_3, self.variavel_d_armazenamento,*self.menu_listas)
       self.menu_listas_formado.config(width=119,font=('arial',11,'bold'))
       self.menu_listas_formado.pack(side='top')
       self.menu_listas_formado.place(rely=0.09, relx=0.25, relheight=0.10, relwidth=0.70)

       self.variavel_d_armazenamento.trace("w",self.test1)

    def listabox2(self):
        # LISTA BOX
        self.listbox2 = Listbox(self.frame4) 
        self.listbox2.pack(side = BOTTOM, fill = BOTH) 
        self.listbox2.place(rely=0.30, relx=0.03, relheight=0.50, relwidth=0.90)
        self.listbox2.configure(bg=color_buton_press, fg="white", font=('arial',11,'bold'), highlightbackground=color_bord, highlightthickness=2, selectbackground=color_buton_press)

        # scrol:
        self.scrol_listabox2 = Scrollbar(self.frame4, orient='vertical')
        self.a = self.listbox2
        self.a.configure(yscrollcommand=self.scrol_listabox2.set)
        self.scrol_listabox2.place(rely=0.30, relx=0.93, relwidth=0.035, relheight=0.5)
        self.scrol_listabox2.config(command=self.a.yview)

        self.scrol_listabox3 = Scrollbar(self.frame4, orient='horizontal')
        self.b = self.listbox2
        self.b.configure(xscrollcommand=self.scrol_listabox3.set)
        self.scrol_listabox3.place(rely=0.805, relx=0.03, relwidth=0.90, relheight=0.05)
        self.scrol_listabox3.config(command=self.b.xview)
    
    def configurar_o_PDF(self):
        self.test1()

        f =self.value.split(",")

        a,b,c,d,e,u,z = str(f[0]), str(f[1]), str(f[2]), str(f[3]), str(f[4]), str(f[5]), str(f[6])
        b,c,d,e,u,z = b.replace('"',"").replace("'",''),c.replace("'", "").replace('"',""),d.replace("'","").replace('"',""),e.replace("'","").replace('"',""), u.replace("'"," ").rstrip(' ').lstrip(' '), z.replace("'"," ").rstrip(' ').lstrip(" ")
       
        l,h = str(f[7]).replace("'"," ").lstrip(" ").rstrip(" "), str(f[8]).replace("'"," ").lstrip(" ").rstrip(" ")
        ss, l, h = {""},l.split("¢"),h.split("¢")

        ll, hh = [e for e in l if e not in ss], [y for y in h if y not in ss]

        dicionario_tabela2 = dict(zip(ll,hh))
        
        if self.menu_seleção == self.menu_listas[0]:

            self.cordenado = b.split(" ")
            self.cordenado.remove(self.cordenado[0])

            volor, contador = len(self.cordenado), False

            if volor >= 3:
                contador = True

            if contador == True:
                if len(self.cordenado) <= 5:

                    y=str(b)
                    y=y.replace("[", "")
                    y=y.replace("]", "")
                    y=y.replace(",", "")
                    y=y.lstrip("'")
                    y=y.rstrip("'")
                    y=y.rstrip(" ")
                    y=y.lstrip(" ")

                    g, elemente, data,  ficha, ficha1 = y, [], 0, str('ficha do cliente'), str('Anotações do Cliente')

                    style,  style1 = ParagraphStyle(
                        'heading1',
                       fontName = 'Helvetica-Bold',
                       fontSize = 20,
                       textColor = colors.black,
                       leading = 20,
                       alignment=TA_CENTER,
                       allowOrphans = 0,
                       allowWidows = 1), ParagraphStyle(
                        'heading1',
                       fontName = 'Helvetica-Bold',
                       fontSize = 15,
                       textColor = colors.black,
                       leading = 20,
                       alignment=TA_LEFT,
                       allowOrphans = 0,
                       allowWidows = 1)

                    data = [['\n'],
                        ['código do cliente:'.capitalize(), a],
                        ['nome do cliente:'.capitalize(), g], 
                        ['telefone:'.capitalize(), e.lstrip(" ")], 
                        ['cpf:'.upper(), c.lstrip(" ")], 
                        ['cnpj:'.upper(), d.lstrip(" ")],
                        ['INSC. Municipal:', u.lstrip(" ")],
                        ['INSC. Estadual:', z.lstrip(" ")],
                        ['\n']
                    ]
                                   
                    t=Table(data, colWidths=[220,220])
                    t.setStyle(TableStyle([
                                    ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                    ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                    ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                    ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                    ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                ]))

                    s = Paragraph(f"{ficha}\n".title(), style)

                    elemente.append(s)
                    elemente.append(t)

                    s = Paragraph(f"{ficha1}\n\n", style1)
                    elemente.append(s)
                    
                    data.clear()
                    data.append("\n")
                    
                    fofoca,fofoca2,fofoca3 =0,[],[]
    
                    for nota, datas in dicionario_tabela2.items():
                        nota,datas = nota.replace('!@#$','<br />\n'),datas
                        fofoca3.append(nota)
                        fofoca2.append(datas)
                    fofoca =dict(zip(fofoca3,fofoca2))
                        
                    print(fofoca)  

                    for nota, datas in fofoca.items():
                        nota = nota.replace('<br />', '')
                        data.append([nota, datas])
                   
                    t= Table(data, colWidths=[250,250])
                    t.setStyle(TableStyle([
                                        ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                        ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                        ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                        ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                        ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                ]))
                    elemente.append(t)
                   
                    self.z = f"cliente_{a}_{g}.pdf".replace(" ","_")
                    
                    self.c = SimpleDocTemplate(self.z,
                                                pagesize=A4,
                                                title=f"client_{a}_{g}.pdf".replace(" ","_"),
                                                author='ANAMA-ITÁ Project',
                                                creator="By Saulo Ferro Maciel",
                                                subject=f"Ficha do cliente {g} Customer File",
                                                keywords=f'Client {g}',
                                                producer='Project is using: Reportlab Library')
                    self.c.build(elemente)

                    
                    guy = f"file:///home/jack/'Área de Trabalho'/estudoPython/tkinter/{self.z}"
                    web.open(f"{guy}")
               
                elif len(self.cordenado) == 6:
                    z = f"{self.cordenado[2]}"
                    z = f"{z[0]}."

                    y = f"{self.cordenado[3]}"
                    y = f"{y[0]}."
                    
                    self.cordenado.remove(self.cordenado[2])
                    self.cordenado.insert(2,z)
                    self.cordenado.remove(self.cordenado[3])
                    self.cordenado.insert(3,y)

                    w=str(self.cordenado)
                    w=w.replace("[", "")
                    w=w.replace("]", "")
                    w=w.replace("'","")
                    w=w.replace(",", "")
                    w=w.rstrip(" ")
                    w=w.lstrip(" ")

                    g, elemente, data,  ficha, ficha1 = w, [], 0, str('ficha do cliente'), str('Anotações do Cliente')

                    style,  style1 = ParagraphStyle(
                            'heading1',
                        fontName = 'Helvetica-Bold',
                        fontSize = 20,
                        textColor = colors.black,
                        leading = 20,
                        alignment=TA_CENTER,
                        allowOrphans = 0,
                        allowWidows = 1), ParagraphStyle(
                            'heading1',
                        fontName = 'Helvetica-Bold',
                        fontSize = 15,
                        textColor = colors.black,
                        leading = 20,
                        alignment=TA_LEFT,
                        allowOrphans = 0,
                        allowWidows = 1)
                    data = [['\n'],
                        ['código do cliente:'.capitalize(), a],
                        ['nome do cliente:'.capitalize(), g], 
                        ['telefone:'.capitalize(), e.lstrip(" ")], 
                        ['cpf:'.upper(), c.lstrip(" ")], 
                        ['cnpj:'.upper(), d.lstrip(" ")],
                        ['INSC. Municipal:', u.lstrip(" ")],
                        ['INSC. Estadual:', z.lstrip(" ")],
                        ['\n']
                    ]
                    
                    t=Table(data, colWidths=[220,220])
                    t.setStyle(TableStyle([
                                    ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                    ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                    ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                    ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                    ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                ]))

                    s = Paragraph(f"{ficha}\n".title(), style)

                    elemente.append(s)
                    elemente.append(t)

                    s = Paragraph(f"{ficha1}\n\n", style1)
                    elemente.append(s)
                    
                    data.clear()
                    data.append("\n")
                    
                    fofoca,fofoca2,fofoca3 =0,[],[]
    
                    for nota, datas in dicionario_tabela2.items():
                        nota,datas = nota.replace('!@#$','<br />\n'),datas
                        fofoca3.append(nota)
                        fofoca2.append(datas)
                    fofoca =dict(zip(fofoca3,fofoca2))
                        
                    print(fofoca)  

                    for nota, datas in fofoca.items():
                        nota = nota.replace('<br />', '')
                        data.append([nota, datas])
                   
                    t= Table(data, colWidths=[250,250])
                    t.setStyle(TableStyle([
                                        ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                        ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                        ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                        ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                        ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                ]))
                    elemente.append(t)
                   
                    self.z = f"cliente_{a}_{g}.pdf".replace(" ","_")
                    
                    self.c = SimpleDocTemplate(self.z,
                                                pagesize=A4,
                                                title=f"client_{a}_{g}.pdf".replace(" ","_"),
                                                author='ANAMA-ITÁ Project',
                                                creator="By Saulo Ferro Maciel",
                                                subject=f"Ficha do cliente {g} Customer File",
                                                keywords=f'Client {g}',
                                                producer='Project is using: Reportlab Library')
                    self.c.build(elemente)

                    guy = f"file:///home/jack/'Área de Trabalho'/estudoPython/tkinter/{self.z}"
                    web.open(f"{guy}")

                else:
                    if len(self.cordenado) == 7:
                        z = f"{self.cordenado[2]}"
                        z = f"{z[0]}."

                        y = f"{self.cordenado[3]}"
                        y = f"{y[0]}."
                        
                        x = f"{self.cordenado[4]}"
                        x = f"{y[0]}."

                        self.cordenado.remove(self.cordenado[2])
                        self.cordenado.insert(2,z)
                        self.cordenado.remove(self.cordenado[3])
                        self.cordenado.insert(3,y)
                        self.cordenado.remove(self.cordenado[4])
                        self.cordenado.insert(4,x)
                        
                        w=str(self.cordenado)
                        w=w.replace("[", "")
                        w=w.replace("]", "")
                        w=w.replace("'","")
                        w=w.replace(",", "")
                        w=w.rstrip(" ")
                        w=w.lstrip(" ")

                        g, elemente, data,  ficha, ficha1 = w, [], 0, str('ficha do cliente'), str('Anotações do Cliente')

                        style,  style1 = ParagraphStyle(
                            'heading1',
                            fontName = 'Helvetica-Bold',
                            fontSize = 20,
                            textColor = colors.black,
                            leading = 20,
                            alignment=TA_CENTER,
                            allowOrphans = 0,
                            allowWidows = 1), ParagraphStyle(
                                'heading1',
                            fontName = 'Helvetica-Bold',
                            fontSize = 15,
                            textColor = colors.black,
                            leading = 20,
                            alignment=TA_LEFT,
                            allowOrphans = 0,
                            allowWidows = 1)

                        data = [['\n'],
                            ['código do cliente:'.capitalize(), a],
                            ['nome do cliente:'.capitalize(), g], 
                            ['telefone:'.capitalize(), e.lstrip(" ")], 
                            ['cpf:'.upper(), c.lstrip(" ")], 
                            ['cnpj:'.upper(), d.lstrip(" ")],
                            ['INSC. Municipal:', u.lstrip(" ")],
                            ['INSC. Estadual:', z.lstrip(" ")],
                            ['\n']
                        ]
                    
                        
                        t=Table(data, colWidths=[220,220])
                        t.setStyle(TableStyle([
                                        ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                        ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                        ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                        ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                        ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                    ]))

                        s = Paragraph(f"{ficha}\n\n".title(), style)

                        elemente.append(s)
                        elemente.append(t)

                        s = Paragraph(f"{ficha1}\n\n", style1)
                        elemente.append(s)
                        
                        data.clear()
                        data.append("\n")
                        
                        fofoca,fofoca2,fofoca3 =0,[],[]
        
                        for nota, datas in dicionario_tabela2.items():
                            nota,datas = nota.replace('!@#$','<br />\n'),datas
                            fofoca3.append(nota)
                            fofoca2.append(datas)
                        fofoca =dict(zip(fofoca3,fofoca2))
                            
                        print(fofoca)  

                        for nota, datas in fofoca.items():
                            nota = nota.replace('<br />', '')
                            data.append([nota, datas])
                    
                        t= Table(data, colWidths=[250,250])
                        t.setStyle(TableStyle([
                                            ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                            ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                            ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                            ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                            ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                    ]))
                        elemente.append(t)
                
                        self.z = f"cliente_{a}_{g}.pdf".replace(" ","_")
                        
                        self.c = SimpleDocTemplate(self.z,
                                                    pagesize=A4,
                                                    title=f"client_{a}_{g}.pdf".replace(" ","_"),
                                                    author='ANAMA-ITÁ Project',
                                                    creator="By Saulo Ferro Maciel",
                                                    subject=f"Ficha do cliente {g} Customer File",
                                                    keywords=f'Client {g}',
                                                    producer='Project is using: Reportlab Library')
                        self.c.build(elemente)
                        
                        guy = f"file:///home/jack/'Área de Trabalho'/estudoPython/tkinter/{self.z}"
                        web.open(f"{guy}")   

                    elif len(self.cordenado) == 8:
                        z = f"{self.cordenado[2]}"
                        z = f"{z[0]}."

                        y = f"{self.cordenado[3]}"
                        y = f"{y[0]}."
                        
                        x = f"{self.cordenado[4]}"
                        x = f"{y[0]}."

                        k = f"{self.cordenado[5]}"
                        k = f"{y[0]}."
                        
                        self.cordenado.remove(self.cordenado[2])
                        self.cordenado.insert(2,z)
                        self.cordenado.remove(self.cordenado[3])
                        self.cordenado.insert(3,y)
                        self.cordenado.remove(self.cordenado[4])
                        self.cordenado.insert(4,x)
                        self.cordenado.remove(self.cordenado[5])
                        self.cordenado.insert(5,k)
                        
                        w=str(self.cordenado)
                        w=w.replace("[", "")
                        w=w.replace("]", "")
                        w=w.replace("'","")
                        w=w.replace(",", "")
                        w=w.rstrip(" ")
                        w=w.lstrip(" ")

                        g, elemente, data,  ficha, ficha1 = w, [], 0, str('ficha do cliente'), str('Anotações do Cliente')

                        style,  style1 = ParagraphStyle(
                                'heading1',
                            fontName = 'Helvetica-Bold',
                            fontSize = 20,
                            textColor = colors.black,
                            leading = 20,
                            alignment=TA_CENTER,
                            allowOrphans = 0,
                            allowWidows = 1), ParagraphStyle(
                                'heading1',
                            fontName = 'Helvetica-Bold',
                            fontSize = 15,
                            textColor = colors.black,
                            leading = 20,
                            alignment=TA_LEFT,
                            allowOrphans = 0,
                            allowWidows = 1)
                        data = [['\n'],
                            ['código do cliente:'.capitalize(), a],
                            ['nome do cliente:'.capitalize(), g], 
                            ['telefone:'.capitalize(), e.lstrip(" ")], 
                            ['cpf:'.upper(), c.lstrip(" ")], 
                            ['cnpj:'.upper(), d.lstrip(" ")],
                            ['INSC. Municipal:', u.lstrip(" ")],
                            ['INSC. Estadual:', z.lstrip(" ")],
                            ['\n']
                        ]
                    
                        t=Table(data, colWidths=[220,220])
                        t.setStyle(TableStyle([
                                        ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                        ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                        ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                        ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                        ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                    ]))

                        s = Paragraph(f"{ficha}\n\n".title(), style)

                        elemente.append(s)
                        elemente.append(t)

                        s = Paragraph(f"{ficha1}\n\n", style1)
                        elemente.append(s)
                        
                        data.clear()
                        data.append("\n")
                        
                        fofoca,fofoca2,fofoca3 =0,[],[]
        
                        for nota, datas in dicionario_tabela2.items():
                            nota,datas = nota.replace('!@#$','<br />\n'),datas
                            fofoca3.append(nota)
                            fofoca2.append(datas)
                        fofoca =dict(zip(fofoca3,fofoca2))
                            
                        print(fofoca)  

                        for nota, datas in fofoca.items():
                            nota = nota.replace('<br />', '')
                            data.append([nota, datas])
                    
                        t= Table(data, colWidths=[250,250])
                        t.setStyle(TableStyle([
                                            ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                            ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                            ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                            ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                            ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                    ]))
                        elemente.append(t)

                        self.z = f"cliente_{a}_{g}.pdf".replace(" ","_")
                        
                        self.c = SimpleDocTemplate(self.z,
                                                    pagesize=A4,
                                                    title=f"client_{a}_{g}.pdf".replace(" ","_"),
                                                    author='ANAMA-ITÁ Project',
                                                    creator="By Saulo Ferro Maciel",
                                                    subject=f"Ficha do cliente {g} Customer File",
                                                    keywords=f'Client {g}',
                                                    producer='Project is using: Reportlab Library')
                        self.c.build(elemente)
                        
                        guy = f"file:///home/jack/'Área de Trabalho'/estudoPython/tkinter/{self.z}"
                        web.open(f"{guy}")

                    elif len(self.cordenado) >= 9:
                            vv = f"{self.cordenado[0]}"
                            v = vv
                            vv = f">>{vv}"

                            z = f"{self.cordenado[2]}"
                            z = f"{z[0]}."

                            y = f"{self.cordenado[3]}"
                            y = f"{y[0]}."
                            
                            x = f"{self.cordenado[4]}"
                            x = f"{y[0]}."

                            k = f"{self.cordenado[5]}"
                            k = f"{y[0]}.."
                            
                            kk = f"{self.cordenado[5]}"
                            
                            self.cordenado.remove(self.cordenado[0])
                            self.cordenado.insert(0,vv)
                            self.cordenado.remove(self.cordenado[2])
                            self.cordenado.insert(2,z)
                            self.cordenado.remove(self.cordenado[3])
                            self.cordenado.insert(3,y)
                            self.cordenado.remove(self.cordenado[4])
                            self.cordenado.insert(4,x)
                            self.cordenado.remove(self.cordenado[5])
                            self.cordenado.insert(5,k)
                            
                            w=str(self.cordenado)
                            w=w.replace("[", "")
                            w=w.replace("]", "")
                            w=w.replace("'","")
                            w=w.replace(",", "")
                            w=w.rstrip(" ")
                            w=w.lstrip(" ")

                            g, elemente, data,  ficha, ficha1 = w, [], [], str('ficha do cliente'), str('Anotações do Cliente')
                            lista_test, lista_test1 = 0,[]

                            lista_test = ['código do cliente:'.capitalize(),
                                'nome do cliente:'.capitalize(),
                                'telefone:'.capitalize(),
                                'cpf:'.upper(),
                                'cnpj:'.upper(),
                                'INSC. Municipal:', 
                                'INSC. Estadual:']


                            lista_test1.append(a)
                            lista_test1.append(g)
                            lista_test1.append(e)
                            lista_test1.append(c) 
                            lista_test1.append(d)
                            lista_test1.append(u)
                            lista_test1.append(z)    

                            dicionario_test = dict(zip(lista_test,lista_test1)) 

                            style,  style1 = ParagraphStyle(
                                    'heading1',
                                fontName = 'Helvetica-Bold',
                                fontSize = 20,
                                textColor = colors.black,
                                leading = 20,
                                alignment=TA_CENTER,
                                allowOrphans = 0,
                                allowWidows = 1), ParagraphStyle(
                                    'heading1',
                                fontName = 'Helvetica-Bold',
                                fontSize = 15,
                                textColor = colors.black,
                                leading = 20,
                                alignment=TA_LEFT,
                                allowOrphans = 0,
                                allowWidows = 1)

                            data.append('\n')
                            ff, fff = [],[]
                            for a1,a2 in dicionario_test.items():
                                a2 = a2.replace('..', '<br />.\n').replace('>>', '<br />\n')
                                ff.append(a1)
                                fff.append(a2)
                            dicionario_test = 0
                            dicionario_test = dict(zip(ff,fff))

                            for a1,a2 in dicionario_test.items():
                                a2 = a2.replace('<br />.', '.').replace('<br />', '')
                                data.append([a1, a2])
                            data.append(['\n'])  
                            
                            t=Table(data, colWidths=[220,220])
                            t.setStyle(TableStyle([
                                            ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                            ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                            ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                            ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                            ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                        ]))

                            s = Paragraph(f"\n{ficha}\n".title(), style)

                            elemente.append(s)
                            elemente.append(t)

                            s = Paragraph(f"{ficha1}\n\n", style1)
                            elemente.append(s)
                            
                            data.clear()
                            data.append("\n")
                            
                            fofoca,fofoca2,fofoca3 =0,[],[]
            
                            for nota, datas in dicionario_tabela2.items():
                                nota,datas = nota.replace('!@#$','<br />\n'),datas
                                fofoca3.append(nota)
                                fofoca2.append(datas)
                            fofoca =dict(zip(fofoca3,fofoca2))
                                
                            print(fofoca)  

                            for nota, datas in fofoca.items():
                                nota = nota.replace('<br />', '')
                                data.append([nota, datas])
                        
                            t= Table(data, colWidths=[250,250])
                            t.setStyle(TableStyle([
                                                ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                                ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                                ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                                ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                                ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                        ]))
                            elemente.append(t)

                            self.cordenado.remove(self.cordenado[5])
                            self.cordenado.insert(5,kk)
                            self.cordenado.remove(self.cordenado[0])
                            self.cordenado.insert(0,v)
                            
                            w=str(self.cordenado)
                            w=w.replace("[", "")
                            w=w.replace("]", "")
                            w=w.replace("'","")
                            w=w.replace(",", "")
                            w=w.rstrip(" ")
                            w=w.lstrip(" ")
                            g = w

                            self.z = f"cliente_{a}_{g}.pdf".replace(" ","_")
                            
                            self.c = SimpleDocTemplate(self.z,
                                                        pagesize=A4,
                                                        title=f"client_{a}_{g}.pdf".replace(" ","_"),
                                                        author='ANAMA-ITÁ Project',
                                                        creator="By Saulo Ferro Maciel",
                                                        subject=f"Ficha do cliente {g} Customer File",
                                                        keywords=f'Client {g}',
                                                        producer='Project is using: Reportlab Library')
                            self.c.build(elemente)
                            
                            guy = f"file:///home/jack/'Área de Trabalho'/estudoPython/tkinter/{self.z}"
                            web.open(f"{guy}")         
            
            else:
                if volor <= 3:   
                    menssage = msg.askquestion("Aviso: ", f'{str("Deseja continuar?").upper()} O  cliente {b[1]} não possui 02 sobrenomes cadastrados', icon = 'question')
                    if menssage == 'yes':
                        menssage = msg.showinfo("Aviso:".upper(), f'Processo finalizado ...', icon='warning')
                        y=str(b)
                        y=y.replace("[", "")
                        y=y.replace("]", "")
                        y=y.replace(",", "")
                        y=y.lstrip("'")
                        y=y.rstrip("'")
                        y=y.rstrip(" ")
                        y=y.lstrip(" ")

                        g, elemente, data,  ficha, ficha1 = y, [], 0, str('ficha do cliente'), str('Anotações do Cliente')

                        style,  style1 = ParagraphStyle(
                                'heading1',
                            fontName = 'Helvetica-Bold',
                            fontSize = 20,
                            textColor = colors.black,
                            leading = 20,
                            alignment=TA_CENTER,
                            allowOrphans = 0,
                            allowWidows = 1), ParagraphStyle(
                                'heading1',
                            fontName = 'Helvetica-Bold',
                            fontSize = 15,
                            textColor = colors.black,
                            leading = 20,
                            alignment=TA_LEFT,
                            allowOrphans = 0,
                            allowWidows = 1)

                        data = [['\n'],
                            ['código do cliente:'.capitalize(), a],
                            ['nome do cliente:'.capitalize(), g], 
                            ['telefone:'.capitalize(), e.lstrip(" ")], 
                            ['cpf:'.upper(), c.lstrip(" ")], 
                            ['cnpj:'.upper(), d.lstrip(" ")],
                            ['INSC. Municipal:', u.lstrip(" ")],
                            ['INSC. Estadual:', z.lstrip(" ")],
                            ['\n']
                        ]
                        
                        t=Table(data, colWidths=[220,220])
                        t.setStyle(TableStyle([
                                        ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                        ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                        ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                        ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                        ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                    ]))

                        s = Paragraph(f"{ficha}\n".title(), style)

                        elemente.append(s)
                        elemente.append(t)

                        s = Paragraph(f"{ficha1}\n\n", style1)
                        elemente.append(s)
                        
                        data.clear()
                        data.append("\n")
                        
                        fofoca,fofoca2,fofoca3 =0,[],[]
        
                        for nota, datas in dicionario_tabela2.items():
                            nota,datas = nota.replace('!@#$','<br />\n'),datas
                            fofoca3.append(nota)
                            fofoca2.append(datas)
                        fofoca =dict(zip(fofoca3,fofoca2))
                            
                        print(fofoca)  

                        for nota, datas in fofoca.items():
                            nota = nota.replace('<br />', '')
                            data.append([nota, datas])
                    
                        t= Table(data, colWidths=[250,250])
                        t.setStyle(TableStyle([
                                            ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                            ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                            ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                            ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                            ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                    ]))
                        elemente.append(t)
                    
                        self.z = f"cliente_{a}_{g}.pdf".replace(" ","_")
                        
                        self.c = SimpleDocTemplate(self.z,
                                                    pagesize=A4,
                                                    title=f"client_{a}_{g}.pdf".replace(" ","_"),
                                                    author='ANAMA-ITÁ Project',
                                                    creator="By Saulo Ferro Maciel",
                                                    subject=f"Ficha do cliente {g} Customer File",
                                                    keywords=f'Client {g}',
                                                    producer='Project is using: Reportlab Library')
                        self.c.build(elemente)

                        
                        guy = f"file:///home/jack/'Área de Trabalho'/estudoPython/tkinter/{self.z}"
                        web.open(f"{guy}")
                   
                    else:
                        if menssage == 'no':
                            menssage = msg.showinfo("Aviso:".upper(), f'Processo {"encerrado".upper()} ...', icon='warning')

        if self.menu_seleção == self.menu_listas[1]:

            self.cordenado = b.split(" ")
            self.cordenado.remove(self.cordenado[0])

            volor, contador = len(self.cordenado), False

            if volor >= 3:
                contador = True

            if contador == True:
                if len(self.cordenado) <= 5:

                    y=str(b)
                    y=y.replace("[", "")
                    y=y.replace("]", "")
                    y=y.replace(",", "")
                    y=y.lstrip("'")
                    y=y.rstrip("'")
                    y=y.rstrip(" ")
                    y=y.lstrip(" ")

                    g, elemente, data,  ficha, ficha1 = y, [], 0, str('ficha do cliente'), str('Anotações do Cliente')

                    style,  style1 = ParagraphStyle(
                        'heading1',
                        fontName = 'Helvetica-Bold',
                        fontSize = 20,
                        textColor = colors.black,
                        leading = 20,
                        alignment=TA_LEFT,
                        allowOrphans = 0,
                        allowWidows = 1), ParagraphStyle(
                        'heading1',
                        fontName = 'Helvetica-Bold',
                        fontSize = 15,
                        textColor = colors.black,
                        leading = 20,
                        alignment=TA_LEFT,
                        allowOrphans = 0,
                        allowWidows = 1)
                    data = [['\n'],
                        ['código do cliente:'.capitalize(), a],
                        ['nome do cliente:'.capitalize(), g], 
                        ['telefone:'.capitalize(), e.lstrip(" ")], 
                        ['cpf:'.upper(), c.lstrip(" ")], 
                        ['cnpj:'.upper(), d.lstrip(" ")],
                        ['INSC. Municipal:', u.lstrip(" ")],
                        ['INSC. Estadual:', z.lstrip(" ")],
                        ['\n']
                    ]
                    
                    t=Table(data, colWidths=[220,220])
                    t.setStyle(TableStyle([
                                    ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                    ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                    ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                    ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                    ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                ]))

                    s = Paragraph(f"{ficha}\n".title(), style)

                    elemente.append(s)
                    elemente.append(t)

                    s = Paragraph(f"{ficha1}\n\n", style1)
                    elemente.append(s)
                    
                    data.clear()
                    data.append("\n")
                    
                    fofoca,fofoca2,fofoca3 =0,[],[]

                    for nota, datas in dicionario_tabela2.items():
                        nota,datas = nota.replace('!@#$','<br />\n'),datas
                        fofoca3.append(nota)
                        fofoca2.append(datas)
                    fofoca =dict(zip(fofoca3,fofoca2))
                        
                    print(fofoca)  

                    for nota, datas in fofoca.items():
                        nota = nota.replace('<br />', '')
                        data.append([nota, datas])
                    
                    t= Table(data, colWidths=[250,250])
                    t.setStyle(TableStyle([
                                        ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                        ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                        ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                        ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                        ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                ]))
                    elemente.append(t)
                    
                    self.z = f"cliente_{a}_{g}.doc".replace(" ","_")
                    
                    self.c = SimpleDocTemplate(self.z,
                                                pagesize=A4,
                                                title=f"client_{a}_{g}.pdf".replace(" ","_"),
                                                author='ANAMA-ITÁ Project',
                                                creator="By Saulo Ferro Maciel",
                                                subject=f"Ficha do cliente {g} Customer File",
                                                keywords=f'Client {g}',
                                                producer='Project is using: Reportlab Library')
                    self.c.build(elemente)

                    
                    guy = f"file:///home/jack/'Área de Trabalho'/estudoPython/tkinter/{self.z}"
                    web.open(f"{guy}")
                
                elif len(self.cordenado) == 6:
                    z = f"{self.cordenado[2]}"
                    z = f"{z[0]}."

                    y = f"{self.cordenado[3]}"
                    y = f"{y[0]}."
                    
                    self.cordenado.remove(self.cordenado[2])
                    self.cordenado.insert(2,z)
                    self.cordenado.remove(self.cordenado[3])
                    self.cordenado.insert(3,y)

                    w=str(self.cordenado)
                    w=w.replace("[", "")
                    w=w.replace("]", "")
                    w=w.replace("'","")
                    w=w.replace(",", "")
                    w=w.rstrip(" ")
                    w=w.lstrip(" ")

                    g, elemente, data,  ficha, ficha1 = w, [], 0, str('ficha do cliente'), str('Anotações do Cliente')

                    style,  style1 = ParagraphStyle(
                        'heading1',
                       fontName = 'Helvetica-Bold',
                       fontSize = 20,
                       textColor = colors.black,
                       leading = 20,
                       alignment=TA_LEFT,
                       allowOrphans = 0,
                       allowWidows = 1), ParagraphStyle(
                        'heading1',
                       fontName = 'Helvetica-Bold',
                       fontSize = 15,
                       textColor = colors.black,
                       leading = 20,
                       alignment=TA_LEFT,
                       allowOrphans = 0,
                       allowWidows = 1)

                    data = [['\n'],
                        ['código do cliente:'.capitalize(), a],
                        ['nome do cliente:'.capitalize(), g], 
                        ['telefone:'.capitalize(), e.lstrip(" ")], 
                        ['cpf:'.upper(), c.lstrip(" ")], 
                        ['cnpj:'.upper(), d.lstrip(" ")],
                        ['INSC. Municipal:', u.lstrip(" ")],
                        ['INSC. Estadual:', z.lstrip(" ")],
                        ['\n']
                    ]
                    
                    t=Table(data, colWidths=[220,220])
                    t.setStyle(TableStyle([
                                    ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                    ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                    ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                    ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                    ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                ]))

                    s = Paragraph(f"{ficha}\n".title(), style)

                    elemente.append(s)
                    elemente.append(t)

                    s = Paragraph(f"{ficha1}\n\n", style1)
                    elemente.append(s)
                    
                    data.clear()
                    data.append("\n")
                    
                    fofoca,fofoca2,fofoca3 =0,[],[]

                    for nota, datas in dicionario_tabela2.items():
                        nota,datas = nota.replace('!@#$','<br />\n'),datas
                        fofoca3.append(nota)
                        fofoca2.append(datas)
                    fofoca =dict(zip(fofoca3,fofoca2))
                        
                    print(fofoca)  

                    for nota, datas in fofoca.items():
                        nota = nota.replace('<br />', '')
                        data.append([nota, datas])
                    
                    t= Table(data, colWidths=[250,250])
                    t.setStyle(TableStyle([
                                        ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                        ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                        ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                        ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                        ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                ]))
                    elemente.append(t)
                    
                    self.z = f"cliente_{a}_{g}.doc".replace(" ","_")
                    
                    self.c = SimpleDocTemplate(self.z,
                                                pagesize=A4,
                                                title=f"client_{a}_{g}.pdf".replace(" ","_"),
                                                author='ANAMA-ITÁ Project',
                                                creator="By Saulo Ferro Maciel",
                                                subject=f"Ficha do cliente {g} Customer File",
                                                keywords=f'Client {g}',
                                                producer='Project is using: Reportlab Library')
                    self.c.build(elemente)

                    guy = f"file:///home/jack/'Área de Trabalho'/estudoPython/tkinter/{self.z}"
                    web.open(f"{guy}")

                else:
                    if len(self.cordenado) == 7:
                        z = f"{self.cordenado[2]}"
                        z = f"{z[0]}."

                        y = f"{self.cordenado[3]}"
                        y = f"{y[0]}."
                        
                        x = f"{self.cordenado[4]}"
                        x = f"{y[0]}."

                        self.cordenado.remove(self.cordenado[2])
                        self.cordenado.insert(2,z)
                        self.cordenado.remove(self.cordenado[3])
                        self.cordenado.insert(3,y)
                        self.cordenado.remove(self.cordenado[4])
                        self.cordenado.insert(4,x)
                        
                        w=str(self.cordenado)
                        w=w.replace("[", "")
                        w=w.replace("]", "")
                        w=w.replace("'","")
                        w=w.replace(",", "")
                        w=w.rstrip(" ")
                        w=w.lstrip(" ")

                        g, elemente, data,  ficha, ficha1 = w, [], 0, str('ficha do cliente'), str('Anotações do Cliente')

                        style,  style1 = ParagraphStyle(
                            'heading1',
                            fontName = 'Helvetica-Bold',
                            fontSize = 20,
                            textColor = colors.black,
                            leading = 20,
                            alignment=TA_LEFT,
                            allowOrphans = 0,
                            allowWidows = 1), ParagraphStyle(
                                'heading1',
                            fontName = 'Helvetica-Bold',
                            fontSize = 15,
                            textColor = colors.black,
                            leading = 20,
                            alignment=TA_LEFT,
                            allowOrphans = 0,
                            allowWidows = 1)

                        data = [['\n'],
                            ['código do cliente:'.capitalize(), a],
                            ['nome do cliente:'.capitalize(), g], 
                            ['telefone:'.capitalize(), e.lstrip(" ")], 
                            ['cpf:'.upper(), c.lstrip(" ")], 
                            ['cnpj:'.upper(), d.lstrip(" ")],
                            ['INSC. Municipal:', u.lstrip(" ")],
                            ['INSC. Estadual:', z.lstrip(" ")],
                            ['\n']
                        ]
                            
                        
                        t=Table(data, colWidths=[220,220])
                        t.setStyle(TableStyle([
                                        ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                        ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                        ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                        ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                        ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                    ]))

                        s = Paragraph(f"{ficha}\n".title(), style)

                        elemente.append(s)
                        elemente.append(t)

                        s = Paragraph(f"{ficha1}\n\n", style1)
                        elemente.append(s)
                        
                        data.clear()
                        data.append("\n")
                        
                        fofoca,fofoca2,fofoca3 =0,[],[]
        
                        for nota, datas in dicionario_tabela2.items():
                            nota,datas = nota.replace('!@#$','<br />\n'),datas
                            fofoca3.append(nota)
                            fofoca2.append(datas)
                        fofoca =dict(zip(fofoca3,fofoca2))
                            
                        print(fofoca)  

                        for nota, datas in fofoca.items():
                            nota = nota.replace('<br />', '')
                            data.append([nota, datas])
                    
                        t= Table(data, colWidths=[250,250])
                        t.setStyle(TableStyle([
                                            ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                            ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                            ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                            ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                            ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                    ]))
                        elemente.append(t)
                
                        self.z = f"cliente_{a}_{g}.doc".replace(" ","_")
                        
                        self.c = SimpleDocTemplate(self.z,
                                                    pagesize=A4,
                                                    title=f"client_{a}_{g}.pdf".replace(" ","_"),
                                                    author='ANAMA-ITÁ Project',
                                                    creator="By Saulo Ferro Maciel",
                                                    subject=f"Ficha do cliente {g} Customer File",
                                                    keywords=f'Client {g}',
                                                    producer='Project is using: Reportlab Library')
                        self.c.build(elemente)
                        
                        guy = f"file:///home/jack/'Área de Trabalho'/estudoPython/tkinter/{self.z}"
                        web.open(f"{guy}")   

                    elif len(self.cordenado) == 8:
                        z = f"{self.cordenado[2]}"
                        z = f"{z[0]}."

                        y = f"{self.cordenado[3]}"
                        y = f"{y[0]}."
                        
                        x = f"{self.cordenado[4]}"
                        x = f"{y[0]}."

                        k = f"{self.cordenado[5]}"
                        k = f"{y[0]}."
                        
                        self.cordenado.remove(self.cordenado[2])
                        self.cordenado.insert(2,z)
                        self.cordenado.remove(self.cordenado[3])
                        self.cordenado.insert(3,y)
                        self.cordenado.remove(self.cordenado[4])
                        self.cordenado.insert(4,x)
                        self.cordenado.remove(self.cordenado[5])
                        self.cordenado.insert(5,k)
                        
                        w=str(self.cordenado)
                        w=w.replace("[", "")
                        w=w.replace("]", "")
                        w=w.replace("'","")
                        w=w.replace(",", "")
                        w=w.rstrip(" ")
                        w=w.lstrip(" ")

                        g, elemente, data,  ficha, ficha1 = w, [], 0, str('ficha do cliente'), str('Anotações do Cliente')

                        style,  style1 = ParagraphStyle(
                            'heading1',
                            fontName = 'Helvetica-Bold',
                            fontSize = 20,
                            textColor = colors.black,
                            leading = 20,
                            alignment=TA_LEFT,
                            allowOrphans = 0,
                            allowWidows = 1), ParagraphStyle(
                            'heading1',
                            fontName = 'Helvetica-Bold',
                            fontSize = 15,
                            textColor = colors.black,
                            leading = 20,
                            alignment=TA_LEFT,
                            allowOrphans = 0,
                            allowWidows = 1)

                        data = [['\n'],
                            ['código do cliente:'.capitalize(), a],
                            ['nome do cliente:'.capitalize(), g], 
                            ['telefone:'.capitalize(), e.lstrip(" ")], 
                            ['cpf:'.upper(), c.lstrip(" ")], 
                            ['cnpj:'.upper(), d.lstrip(" ")],
                            ['INSC. Municipal:', u.lstrip(" ")],
                            ['INSC. Estadual:', z.lstrip(" ")],
                            ['\n']
                        ]
                            
                        t=Table(data, colWidths=[220,220])
                        t.setStyle(TableStyle([
                                        ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                        ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                        ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                        ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                        ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                    ]))

                        s = Paragraph(f"{ficha}\n".title(), style)

                        elemente.append(s)
                        elemente.append(t)

                        s = Paragraph(f"{ficha1}\n\n", style1)
                        elemente.append(s)
                        
                        data.clear()
                        data.append("\n")
                        
                        fofoca,fofoca2,fofoca3 =0,[],[]
        
                        for nota, datas in dicionario_tabela2.items():
                            nota,datas = nota.replace('!@#$','<br />\n'),datas
                            fofoca3.append(nota)
                            fofoca2.append(datas)
                        fofoca =dict(zip(fofoca3,fofoca2))
                            
                        print(fofoca)  

                        for nota, datas in fofoca.items():
                            nota = nota.replace('<br />', '')
                            data.append([nota, datas])
                    
                        t= Table(data, colWidths=[250,250])
                        t.setStyle(TableStyle([
                                            ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                            ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                            ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                            ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                            ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                    ]))
                        elemente.append(t)

                        self.z = f"cliente_{a}_{g}.doc".replace(" ","_")
                        
                        self.c = SimpleDocTemplate(self.z,
                                                    pagesize=A4,
                                                    title=f"client_{a}_{g}.pdf".replace(" ","_"),
                                                    author='ANAMA-ITÁ Project',
                                                    creator="By Saulo Ferro Maciel",
                                                    subject=f"Ficha do cliente {g} Customer File",
                                                    keywords=f'Client {g}',
                                                    producer='Project is using: Reportlab Library')
                        self.c.build(elemente)
                        
                        guy = f"file:///home/jack/'Área de Trabalho'/estudoPython/tkinter/{self.z}"
                        web.open(f"{guy}")

                    elif len(self.cordenado) >= 9:
                            vv = f"{self.cordenado[0]}"
                            v = vv
                            vv = f">>{vv}"

                            z = f"{self.cordenado[2]}"
                            z = f"{z[0]}."

                            y = f"{self.cordenado[3]}"
                            y = f"{y[0]}."
                            
                            x = f"{self.cordenado[4]}"
                            x = f"{y[0]}."

                            k = f"{self.cordenado[5]}"
                            k = f"{y[0]}.."
                            
                            kk = f"{self.cordenado[5]}"
                            
                            self.cordenado.remove(self.cordenado[0])
                            self.cordenado.insert(0,vv)
                            self.cordenado.remove(self.cordenado[2])
                            self.cordenado.insert(2,z)
                            self.cordenado.remove(self.cordenado[3])
                            self.cordenado.insert(3,y)
                            self.cordenado.remove(self.cordenado[4])
                            self.cordenado.insert(4,x)
                            self.cordenado.remove(self.cordenado[5])
                            self.cordenado.insert(5,k)
                            
                            w=str(self.cordenado)
                            w=w.replace("[", "")
                            w=w.replace("]", "")
                            w=w.replace("'","")
                            w=w.replace(",", "")
                            w=w.rstrip(" ")
                            w=w.lstrip(" ")

                            g, elemente, data,  ficha, ficha1 = w, [], [], str('ficha do cliente'), str('Anotações do Cliente')
                            lista_test, lista_test1 = 0,[]

                            lista_test = ['código do cliente:'.capitalize(),
                                'nome do cliente:'.capitalize(),
                                'telefone:'.capitalize(),
                                'cpf:'.upper(),
                                'cnpj:'.upper(),
                                'INSC. Municipal:',
                                'INSC. Estadual:']

                            lista_test1.append(a)
                            lista_test1.append(g)
                            lista_test1.append(e)
                            lista_test1.append(c) 
                            lista_test1.append(d)
                            lista_test1.append(u)
                            lista_test1.append(z)  

                            dicionario_test = dict(zip(lista_test,lista_test1)) 

                            style,  style1 = ParagraphStyle(
                                    'heading1',
                                fontName = 'Helvetica-Bold',
                                fontSize = 20,
                                textColor = colors.black,
                                leading = 20,
                                alignment=TA_LEFT,
                                allowOrphans = 0,
                                allowWidows = 1), ParagraphStyle(
                                    'heading1',
                                fontName = 'Helvetica-Bold',
                                fontSize = 15,
                                textColor = colors.black,
                                leading = 20,
                                alignment=TA_LEFT,
                                allowOrphans = 0,
                                allowWidows = 1)

                            data.append('\n')
                            ff, fff = [],[]
                            for a1,a2 in dicionario_test.items():
                                a2 = a2.replace('..', '<br />.\n').replace('>>', '<br />\n')
                                ff.append(a1)
                                fff.append(a2)
                            dicionario_test = 0
                            dicionario_test = dict(zip(ff,fff))

                            for a1,a2 in dicionario_test.items():
                                a2 = a2.replace('<br />.', '.').replace('<br />', '')
                                data.append([a1, a2])
                               
                            data.append('\n')

                            t=Table(data, colWidths=[220,220])
                            t.setStyle(TableStyle([
                                            ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                            ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                            ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                            ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                            ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                        ]))

                            s = Paragraph(f"\n{ficha}\n".title(), style)

                            elemente.append(s)
                            elemente.append(t)

                            s = Paragraph(f"{ficha1}\n\n", style1)
                            elemente.append(s)
                            
                            data.clear()
                            data.append("\n")
                            
                            fofoca,fofoca2,fofoca3 =0,[],[]
            
                            for nota, datas in dicionario_tabela2.items():
                                nota,datas = nota.replace('!@#$','<br />\n'),datas
                                fofoca3.append(nota)
                                fofoca2.append(datas)
                            fofoca =dict(zip(fofoca3,fofoca2))
                                
                            print(fofoca)  

                            for nota, datas in fofoca.items():
                                nota = nota.replace('<br />', '')
                                data.append([nota, datas])
                        
                            t= Table(data, colWidths=[250,250])
                            t.setStyle(TableStyle([
                                                ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                                ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                                ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                                ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                                ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                        ]))
                            elemente.append(t)

                            self.cordenado.remove(self.cordenado[5])
                            self.cordenado.insert(5,kk)
                            self.cordenado.remove(self.cordenado[0])
                            self.cordenado.insert(0,v)
                            
                            w=str(self.cordenado)
                            w=w.replace("[", "")
                            w=w.replace("]", "")
                            w=w.replace("'","")
                            w=w.replace(",", "")
                            w=w.rstrip(" ")
                            w=w.lstrip(" ")
                            g = w

                            self.z = f"cliente_{a}_{g}.pdf".replace(" ","_")
                            
                            self.c = SimpleDocTemplate(self.z,
                                                        pagesize=A4,
                                                        title=f"client_{a}_{g}.pdf".replace(" ","_"),
                                                        author='ANAMA-ITÁ Project',
                                                        creator="By Saulo Ferro Maciel",
                                                        subject=f"Ficha do cliente {g} Customer File",
                                                        keywords=f'Client {g}',
                                                        producer='Project is using: Reportlab Library')
                            self.c.build(elemente)
                            
                            guy = f"file:///home/jack/'Área de Trabalho'/estudoPython/tkinter/{self.z}"
                            web.open(f"{guy}")           
            
            else:
                if volor <= 3:   
                    menssage = msg.askquestion("Aviso: ", f'{str("Deseja continuar?").upper()} O  cliente {b[1]} não possui 02 sobrenomes cadastrados', icon = 'question')
                    if menssage == 'yes':
                        menssage = msg.showinfo("Aviso:".upper(), f'Processo finalizado ...', icon='warning')
                        y=str(b)
                        y=y.replace("[", "")
                        y=y.replace("]", "")
                        y=y.replace(",", "")
                        y=y.lstrip("'")
                        y=y.rstrip("'")
                        y=y.rstrip(" ")
                        y=y.lstrip(" ")

                        g, elemente, data,  ficha, ficha1 = y, [], 0, str('ficha do cliente'), str('Anotações do Cliente')

                        style,  style1 = ParagraphStyle(
                                'heading1',
                            fontName = 'Helvetica-Bold',
                            fontSize = 20,
                            textColor = colors.black,
                            leading = 20,
                            alignment=TA_LEFT,
                            allowOrphans = 0,
                            allowWidows = 1), ParagraphStyle(
                                'heading1',
                            fontName = 'Helvetica-Bold',
                            fontSize = 15,
                            textColor = colors.black,
                            leading = 20,
                            alignment=TA_LEFT,
                            allowOrphans = 0,
                            allowWidows = 1)

                        data = [['\n'],
                            ['código do cliente:'.capitalize(), a],
                            ['nome do cliente:'.capitalize(), g], 
                            ['telefone:'.capitalize(), e.lstrip(" ")], 
                            ['cpf:'.upper(), c.lstrip(" ")], 
                            ['cnpj:'.upper(), d.lstrip(" ")],
                            ['INSC. Municipal:', u.lstrip(" ")],
                            ['INSC. Estadual:', z.lstrip(" ")],
                            ['\n']
                        ]

                        t=Table(data, colWidths=[220,220])
                        t.setStyle(TableStyle([
                                        ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                        ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                        ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                        ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                        ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                    ]))

                        s = Paragraph(f"{ficha}\n".title(), style)

                        elemente.append(s)
                        elemente.append(t)

                        s = Paragraph(f"{ficha1}\n\n", style1)
                        elemente.append(s)
                        
                        data.clear()
                        data.append("\n")
                        
                        fofoca,fofoca2,fofoca3 =0,[],[]
        
                        for nota, datas in dicionario_tabela2.items():
                            nota,datas = nota.replace('!@#$','<br />\n'),datas
                            fofoca3.append(nota)
                            fofoca2.append(datas)
                        fofoca =dict(zip(fofoca3,fofoca2))
                            
                        print(fofoca)  

                        for nota, datas in fofoca.items():
                            nota = nota.replace('<br />', '')
                            data.append([nota, datas])
                    
                        t= Table(data, colWidths=[250,250])
                        t.setStyle(TableStyle([
                                            ('ALIGN',(1,1),(-3,-3),'RIGHT'),
                                            ('VALIGN',(0,-1),(-1,-1),'MIDDLE'),
                                            ('TEXTCOLOR',(0,0),(1,-1),colors.black),
                                            ('FONT', (0,0), (-1,0), 'Helvetica-Bold'),
                                            ('FONTSIZE', (0, 0), (1, -1), 12.5)
                                    ]))
                        elemente.append(t)
                    
                        self.z = f"cliente_{a}_{g}.doc".replace(" ","_")
                        
                        self.c = SimpleDocTemplate(self.z,
                                                    pagesize=A4,
                                                    title=f"client_{a}_{g}.pdf".replace(" ","_"),
                                                    author='ANAMA-ITÁ Project',
                                                    creator="By Saulo Ferro Maciel",
                                                    subject=f"Ficha do cliente {g} Customer File",
                                                    keywords=f'Client {g}',
                                                    producer='Project is using: Reportlab Library')
                        self.c.build(elemente)

                        
                        guy = f"file:///home/jack/'Área de Trabalho'/estudoPython/tkinter/{self.z}"
                        web.open(f"{guy}")
                    
                    else:
                        if menssage == 'no':
                            menssage = msg.showinfo("Aviso:".upper(), f'Processo {"encerrado".upper()} ...', icon='warning')

    def gera_relatorio_cliente(self):
        self.contador = 0
        if self.entry_cod3.get() != "":
            self.contador = 5

        self.listbox2.delete(0, END)
        cd = self.entry_cod3.get()

        if self.contador == 5:
            self.conecta_banco_d_dados()

            self.entry_cod3.insert(END, "%")

            codigo = self.entry_cod3.get()
            self.cursor.execute( """ SELECT * FROM clientes WHERE cod LIKE '%s' """% codigo)
            ddd = self.cursor.fetchall()
            dd = list(t for t in ddd)
            self.desconecta_banco_d_dados()

            if self.entry_cod3.get() == '0%':
                for x in range(0, 6+4):
                    self.listbox2.insert(END, f"ERRO {x+1:2}, VOCÊ DEVE ADERIR UM CÓDIGO válido!".upper())
            else:
                for i in dd: 
                    s = str(i)
                    s = s.replace("/'","").replace("(", "").replace(")", "")
                    self.listbox2.insert(END, f'{s:2}')
            self.listbox2.bind('<<ListboxSelect>>',self.test0)
            self.contador = 0        
        else:
            if self.contador != 5:
                ms = msg.showwarning("Aviso: ", 'Para "baixar" dados do cliente, deve possuir código e nome válidos!', icon = 'warning')
        self.entry_cod3.delete(0, END)
        self.entry_cod3.insert(END, cd)
    
    def final_relatorio(self):
         # CRIADO NOVA JANELA
        self.ventana_janela_3 = Toplevel()
        self.ventana_janela_3.title("gerar Ficha do cliente".title())
        self.ventana_janela_3.configure(background= color_background)
        self.ventana_janela_3.geometry('400x301')
        self.ventana_janela_3.resizable(False,False)
        """self.ventana_janela_2.maxsize(width=380, height=400)
        self.ventana_janela_2.minsize(width=320, height=300)"""
        self.ventana_janela_3.transient(self.ventana_janela)
        self.ventana_janela_3.focus_force() #impede de manuseiar a janela primária, coloca a nova sempre na frente
        self.ventana_janela_3.grab_set() #impede de anotar ou utilizar widgets da janela primária
        
        # CRIANDO UM NOVO FRAME
        self.frame4 = Frame(self.ventana_janela_3, bd= 4, bg=color_frame, highlightbackground=color_bord, highlightthickness=2)
        self.frame4.place(relx=0.01, rely=0.02, relwidth=0.98, relheight= 0.95)

        self.label_codigo3 = Label(self.frame4, text="código".upper(), bg=color_frame, fg= color_background, font=('arial',10,'bold'))
        self.label_codigo3.place(rely=0.01, relx=0.03)
        
        self.entry_cod3 = Entry(self.frame4, bg= color_label)
        self.entry_cod3.place(rely=0.09, relx=0.03, relheight=0.094, relwidth=0.15)

        self.botao_buscar_10= Button(self.frame4, text="buscar".title(), bg=color_background, fg='white', font=('verdana', 9), command=self.gera_relatorio_cliente, activebackground=color_buton_press, activeforeground='white')
        self.botao_buscar_10.place(rely=0.87, relx=0.03, relwidth=0.15, relheight=0.14)

        self.botao_finalizar= Button(self.frame4, text="finalizar".title(), bg=color_background, fg='white', font=('verdana', 9), command=self.configurar_o_PDF, activebackground=color_buton_press, activeforeground='white')
        self.botao_finalizar.place(rely=0.87, relx=0.6, relwidth=0.15, relheight=0.14)

        self.botao_cancelar= Button(self.frame4, text="cancelar".title(), bg=color_background, fg='white', font=('verdana', 9), command=self.Quit2, activebackground=color_buton_press, activeforeground='white')
        self.botao_cancelar.place(rely=0.87, relx=0.78, relwidth=0.15, relheight=0.14)

        self.listabox2()
        self.menubox()
        self.baloes_relatorios()

class Fucao():
    def criar_balão(self):
        self.balao_buscar = ti.Balloon(self.aba1)
        msg_balão_buscar = 'Digite no campo \"NOME\", o nome do cliente\nE aperte aqui para buscar os dados'
        self.balao_buscar.subwidget('label')['image'] = BitmapImage()
        self.balao_buscar.bind_widget(self.botao_buscar, balloonmsg=msg_balão_buscar)

        self.balao_limpar = ti.Balloon(self.aba1)
        msg_balão_limpar = 'Clique aqui!\nCaso queira limpar as áreas de texto (entry) '
        self.balao_limpar.subwidget('label')['image'] = BitmapImage()
        self.balao_limpar.bind_widget(self.botao_limpar, balloonmsg=msg_balão_limpar)

        self.balao_novo = ti.Balloon(self.aba1)
        msg_balão_novo = 'Clique aqui!\nPara cadastrar usuário!\nCaso já tenha preenchido o cadrastro (entry)'
        self.balao_novo.subwidget('label')['image'] = BitmapImage()
        self.balao_novo.bind_widget(self.botao_novo, balloonmsg=msg_balão_novo)

        self.balao_alterar =ti. Balloon(self.aba1)
        msg_balão_alterar = 'Clique aqui!\nCaso queria alterar algum dado do cliente'
        self.balao_alterar.subwidget('label')['image'] = BitmapImage()
        self.balao_alterar.bind_widget(self.botao_alterar, balloonmsg=msg_balão_alterar)

        self.balao_apagar = ti.Balloon(self.aba1)
        msg_balão_apagar  = 'Clique aqui!\nDepois de ter selecionado o cliente\nCaso queria apagar o cliente do programa'
        self.balao_apagar.subwidget('label')['image'] = BitmapImage()
        self.balao_apagar.bind_widget(self.botao_apagar, balloonmsg=msg_balão_apagar)
 
    def variaveis(self):
        self.codigo = self.entry_cod.get()
        self.nome = self.entry_nome.get()
        self.cpf = self.entry_cpf.get()
        self.cnpj = self.entry_cnpj.get()
        self.telefone = self.entry_telefone.get()
        self.inscMunicipal = self.entry_Insc_Municipal.get()
        self.inscEstadual = self.entry_Insc_Estadual.get()

        self.nome = self.nome.lower().title().rstrip(" ").lstrip(" ").rstrip()

    def limpeza_comando(self):
        self.entry_cod.delete(0, END)
        self.entry_nome.delete(0, END)
        self.entry_cpf.delete(0, END)
        self.entry_cnpj.delete(0, END)
        self.entry_telefone.delete(0, END)
        self.entry_Insc_Municipal.delete(0, END)
        self.entry_Insc_Estadual.delete(0, END)

    def conecta_banco_d_dados(self):
        self.conecta = sq3.connect('clientes_banco_de_Dados')
        self.cursor = self.conecta.cursor()
    
    def desconecta_banco_d_dados(self):
        self.conecta.close()

    def monta_banco_em_tabela(self):
        self.conecta_banco_d_dados()
        
        #Cria tabela:
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS clientes(
                cod INTEGER PRIMARY KEY,
                nome_cli CHAR(40) NOT NULL,
                cpf_cli CHAR(40),
                cnpj_cli CHAR(40),
                telefone_cli CHAR(40),
                insc_municipal CHAR(40),
                insc_estadual CHAR(40),
                note CHAR(10000),
                data CHAR(20000)
            );
        ''')

        self.conecta.commit() 
        self.desconecta_banco_d_dados()

    def cliente_add(self):
        self.variaveis()

        c = 0

        if self.nome == "":
            ms = msg.showerror("Aviso de Erro: ", 'Para "cadastrar" cliente, deve possuir um nome válido!', icon = 'warning')
        else:
            if self.nome != "":
                self.nome = self.nome
                c = 1
        
        if self.codigo != "":
            ms = msg.showerror("Aviso de Erro: ", "Para cadastrar cliente, o campo de código deve está vazio!", icon = 'warning')
        else:
            self.codigo = self.codigo
            c = c+1

        if self.cpf != "":
            if self.cpf.isalpha():
                ms = msg.showerror("Aviso de Erro: ", "Para cadastrar cliente, o campo de CNPJ deve conter somente números!", icon = 'warning')
                self.cpf = ''
                c=0
            else:
                if len(str(self.cpf)) < 10+1:
                    print(len(str(self.entry_cpf.get())))
                    ms = msg.showerror("Aviso de Erro: ", "Para CADASTRAR cliente, o campo de CPF deve conter 11 digítos!", icon = 'warning')
                    self.cpf = ''
                    c =0
                else:
                    if len(str(self.cpf)) > 11:
                        print(len(str(self.entry_cpf.get())))
                        ms = msg.showerror("Aviso de Erro: ", "Para CADASTRAR cliente, o campo de CPF não deve ultrapassar  11 digítos!", icon = 'warning')
                        self.cpf = ''
                        c = 0
                    if len(str(self.cpf)) == 11:
                        self.cpf = self.cpf
                        c +=1
        if self.cnpj != "":
            if self.cnpj.isalpha():
                ms = msg.showerror("Aviso de Erro: ", "Para cadastrar cliente, o campo de CNPJ deve conter somente números!", icon = 'warning')
                c =0
            else:
                if len(str(self.cnpj)) < 14:
                    print(len(str(self.cnpj)))
                    ms = msg.showerror("Aviso de Erro: ", "Para CADASTRAR cliente, o campo de CNPJ deve conter 14 digítos!", icon = 'warning')
                    self.cnpj = ''
                    c =0
                else:
                    if len(str(self.cnpj)) > 14:
                        print(len(str(self.cnpj)))
                        ms = msg.showerror("Aviso de Erro: ", "Para CADASTRAR cliente, o campo de CNPJ não deve ultrapassar 14 digítos!", icon = 'warning')
                        self.cnpj = ''
                        c =0
                    if len(str(self.cnpj)) == 14:
                        self.cnpj = self.entry_cnpj.get()
                        c += 1
        if self.telefone != '':
            if self.telefone.isalpha():
                ms = msg.showerror("Aviso de Erro: ", "Para cadastrar cliente, o campo de telefone deve conter somente números!", icon = 'warning')
                self.telefone = ''
                c =0
            else:
                self.telefone = self.telefone
                c += 1
                     
        
        if c >= 2:         
            self.conecta_banco_d_dados()

            self.cursor.execute("""INSERT INTO clientes (nome_cli, cpf_cli, cnpj_cli, telefone_cli, insc_municipal, insc_estadual)
            VALUES (?,?,?,?,?,?)""", (self.nome, self.cpf, self.cnpj, self.telefone, self.inscMunicipal, self.inscEstadual))
            self.conecta.commit()

            self.desconecta_banco_d_dados()
            self.botao_insert()
        
    def botao_insert(self):
        self.planilha_contatos.delete(*self.planilha_contatos.get_children())
        self.conecta_banco_d_dados()
        
        lista = self.cursor.execute(""" SELECT cod, nome_cli, cpf_cli, cnpj_cli, telefone_cli, insc_municipal , insc_estadual FROM clientes
            ORDER BY cod ASC;""")
       
        for i in lista:
            self.planilha_contatos.insert("", END, values = i)
            
        self.desconecta_banco_d_dados()

    def double_click(self, event):
        self.limpeza_comando()

        self.planilha_contatos.selection()

        for n in self.planilha_contatos.selection():
            col1, col2, col3, col4, col5, col6, col7 = self.planilha_contatos.item(n, 'values')
            self.entry_cod.insert(END, col1)
            self.entry_nome.insert(END, col2)
            self.entry_cpf.insert(END, col3)
            self.entry_cnpj.insert(END, col4)
            self.entry_telefone.insert(END, col5)
            self.entry_Insc_Municipal.insert(END, col6)
            self.entry_Insc_Estadual.insert(END, col7)

    def delete_cliente(self):
        if self.entry_cod.get() == "":
            ms = msg.showerror("Aviso de Erro: ", "Para deletar cliente, deve possuir um código válido!", icon='warning')
        
        elif self.entry_cod.get().isalpha():
            ms = msg.showerror("Aviso de Erro: ", "Para deletar cliente, deve possuir um código válido!", icon='warning')

        elif self.entry_nome.get() == "":
            ms = msg.showerror("Aviso de Erro: ", "Para deletar cliente, deve possuir um nome válido!", icon = 'warning')
        
        elif self.entry_cpf.get().isalpha():
            ms =  msg.showerror("Aviso de Erro: ", 'Para deletar cliente, o campo de CPF deve conter somente números!', icon = 'warning')
       
        elif self.entry_cnpj.get().isalpha():
            ms = msg.showerror("Aviso de Erro: ", "Para deletar cliente, o campo de CNPJ deve conter somente números!", icon = 'warning')
        
        elif self.entry_telefone.get().isalpha():
            ms = msg.showerror("Aviso de Erro: ", "Para deletar cliente, o campo de telefone deve conter somente números!", icon = 'warning')
       
        else:
            self.conecta_banco_d_dados()
            self.variaveis()

            self.cursor.execute(""" DELETE FROM clientes WHERE cod = ?""", (self.codigo,))
            self.conecta.commit()
            self.desconecta_banco_d_dados()

            self.limpeza_comando()
            self.botao_insert()
        self.limpeza_comando()

    def alterar_cliente(self):
        self.variaveis()
        if self.entry_cod.get() == "":
            ms = msg.showerror("Aviso de Erro: ", 'Para "alterar" dados do cliente, deve possuir um código válido!', icon="warning")
       
        elif self.entry_cod.get().isalpha():
            ms = msg.showerror("Aviso de Erro: ", 'Para "alterar" dados do cliente, deve possuir um código válido!', icon='warning')

        elif self.entry_nome.get() == "":
            ms = msg.showerror("Aviso de Erro: ", 'Para "alterar" dados do cliente, deve possuir um nome válido!', icon = 'warning')
        
        elif self.entry_cpf.get().isalpha():
            ms =  msg.showerror("Aviso de Erro: ", 'Para "alterar" cliente, o campo de CPF deve conter somente números!', icon = 'warning')
        
        elif self.entry_cnpj.get().isalpha():
            ms = msg.showerror("Aviso de Erro: ", 'Para "alterar" dados do cliente, o campo de CNPJ deve conter somente números!', icon = 'warning')
        
        elif self.entry_telefone.get().isalpha():
            ms = msg.showerror("Aviso de Erro: ", "Para alterar cliente, o campo de telefone deve conter somente números!", icon = 'warning')
       
        else:
            self.conecta_banco_d_dados()
            self.cursor.execute(""" UPDATE clientes SET nome_cli = ?, cpf_cli = ?, cnpj_cli = ?, telefone_cli = ?, insc_municipal = ? ,insc_estadual = ?
            WHERE cod = ?""", 
            (self.nome, self.cpf, self.cnpj, self.telefone,
            self.inscMunicipal, self.inscEstadual, self.codigo))

            self.conecta.commit()
            self.desconecta_banco_d_dados()
            self.botao_insert()
            self.limpeza_comando()
        self.limpeza_comando()
    
    def buscar_cliente(self):
        self.conecta_banco_d_dados()

        self.planilha_contatos.delete(*self.planilha_contatos.get_children())

        self.entry_nome.insert(END, '%')
        nome = self.entry_nome.get()
        self.cursor.execute( """ SELECT cod, nome_cli, cpf_cli, cnpj_cli, telefone_cli FROM clientes
            WHERE nome_cli LIKE '%s' """% nome)
        
        busca_mome_Cli = self.cursor.fetchall()

        for i in busca_mome_Cli:
            self.planilha_contatos.insert("", END, values=i) 

        self.limpeza_comando()
        self.desconecta_banco_d_dados()    

    def buscar_cliente_pelo_Codigo(self):
        self.conecta_banco_d_dados()
        self.planilha_contatos.delete(*self.planilha_contatos.get_children())

        self.entry_cod.insert(END, '%')
        codigo = self.entry_cod.get()
        self.cursor.execute(
            """ SELECT cod, nome_cli, cpf_cli, cnpj_cli, telefone_cli FROM clientes
            WHERE cod LIKE '%s' """% codigo)
        
        busca_cod_Cli = self.cursor.fetchall()
        
        for i in busca_cod_Cli:
            self.planilha_contatos.insert("", END, values=i)
                
        self.limpeza_comando()
        self.desconecta_banco_d_dados() 

class Aplicativo(Fucao, Relatorios, Anotações):
    def __init__(self):
        self.ventana_janela = ventana_janela
        self.tela_configuração()
        self.criacao_Frames()
        self.botoes_do_frame_1()
        self.label_e_entry()
        self.planilha_frame_2()
        self.monta_banco_em_tabela()
        self.botao_insert()
        self.menus_externo()
        ventana_janela.mainloop()
    
    def tela_configuração(self):
        self.ventana_janela.title("anama-itá".upper())
        self.ventana_janela.configure(background= color_background)
        self.ventana_janela.geometry("600x500")
        self.ventana_janela.resizable(True,True)
        self.ventana_janela.maxsize(width=700, height=600)
        self.ventana_janela.minsize(width=590, height=590)

    def criacao_Frames(self):
        self.frame1 = Frame(self.ventana_janela, bd= 4, bg=color_frame, highlightbackground=color_bord, highlightthickness=2)
        self.frame1.place(relx=0.01, rely=0.02, relwidth=0.98, relheight= 0.45)

        self.frame2 = Frame(self.ventana_janela, bd= 4, bg=color_frame, highlightbackground=color_bord, highlightthickness=2)
        self.frame2.place(relx=0.01, rely=0.5, relwidth=0.98, relheight= 0.48)

        #Criando ABAS:
        self.abas = tt.Notebook(self.frame1)
        self.aba1 = Frame(self.abas, background=color_label,bd=3, highlightbackground=color_bord, highlightthickness=1 )
        self.abas.add(self.aba1, text='Cadastro De Cliente')
        self.abas.place(relx=0, rely=0, relheight=0.99, relwidth=0.99)

        self.abas_2 = tt.Notebook(self.frame2)
        self.aba3 = Frame(self.abas_2, background=color_label,bd=3, highlightbackground=color_bord, highlightthickness=1) 
        self.abas_2.add(self.aba3, text="Planilha De Cadastro")
        self.abas_2.place(relx=0, rely=0, relheight=0.99, relwidth=0.99)

    def botoes_do_frame_1(self):
        self.botao_buscar= Button(self.aba1, text="buscar".upper(), bg=color_background, fg='white', font=('verdana', 9), command=self.buscar_cliente, activebackground=color_buton_press, activeforeground='white')
        self.botao_buscar.place(relx=0.05, rely=0.85, relwidth=0.11, relheight=0.11)

        self.botao_limpar= Button(self.aba1, text="limpar".upper(), bg=color_background, fg='white', font=('verdana', 9), command=self.limpeza_comando, activeforeground='white', activebackground=color_buton_press)
        self.botao_limpar.place(relx=0.2, rely=0.85, relwidth=0.11, relheight=0.11)

        self.botao_novo= Button(self.aba1, text="novo".upper(), bg=color_background, fg='white', font=('verdana', 9),command=self.cliente_add, activebackground=color_buton_press, activeforeground="white")
        self.botao_novo.place(relx=0.35, rely=0.85, relwidth=0.11, relheight=0.11)

        self.botao_alterar= Button(self.aba1, text="alterar".upper(), bg=color_background, fg= 'white', font=('verdana', 9), command=self.alterar_cliente, activeforeground='white', activebackground=color_buton_press)
        self.botao_alterar.place(relx=0.49, rely=0.85, relwidth=0.11, relheight=0.11)

        self.botao_apagar= Button(self.aba1, text="apagar".upper(), bg=color_background,fg='white', font=('verdana', 9), command=self.delete_cliente, activebackground=color_buton_press, activeforeground='white')
        self.botao_apagar.place(relx=0.63, rely=0.85, relwidth=0.11, relheight=0.11)

        self.criar_balão()

    def label_e_entry(self): 
        # CPF:
        self.label_cpf = Label(self.aba1, text="cpf".upper(), bg=color_frame, fg= color_background, font=('arial',10,'bold'))
        self.label_cpf.place(rely=0.01, relx=0.25)
    
        self.entry_cpf = Entry(self.aba1, bg= color_label)
        self.entry_cpf.place(rely=0.09, relx=0.25, relheight=0.092, relwidth=0.25)

        # CNPJ:
        self.label_cnpj = Label(self.aba1, text="cnpj".upper(), bg=color_frame, fg= color_background, font=('arial',10,'bold'))
        self.label_cnpj.place(rely=0.01, relx=0.58)
    
        self.entry_cnpj = Entry(self.aba1, bg= color_label)
        self.entry_cnpj.place(rely=0.09, relx=0.58, relheight=0.092, relwidth=0.25)
       
        # TELEFONE:
        self.label_telefone = Label(self.aba1, text="telefone".upper(), bg=color_frame, fg= color_background, font=('arial',10,'bold'))
        self.label_telefone.place(rely=0.48, relx=0.05)
   
        self.entry_telefone = Entry(self.aba1, bg= color_label)
        self.entry_telefone.place(rely=0.565, relx=0.05, relheight=0.089, relwidth=0.20)

        # codigo:
        self.label_codigo = Label(self.aba1, text="código".upper(), bg=color_frame, fg= color_background, font=('arial',10,'bold'))
        self.label_codigo.place(rely=0.01, relx=0.05)
        
        self.entry_cod = Entry(self.aba1, bg= color_label)
        self.entry_cod.place(rely=0.09, relx=0.06, relheight=0.092, relwidth=0.09)

        # NOME:
        self.label_nome = Label(self.aba1, text="nome".upper(), bg=color_frame, fg= color_background, font=('arial',10,'bold'))
        self.label_nome.place(rely=0.25, relx=0.05)
    
        self.entry_nome = Entry(self.aba1, bg= color_label)
        self.entry_nome.place(rely=0.33, relx=0.05, relheight=0.092, relwidth=0.78)

        # Insc. Estadual:
        self.label_Insc_Estadual = Label(self.aba1, text=f"{'Insc'.upper()}. Estadual", bg=color_frame, fg= color_background, font=('arial',10,'bold'))
        self.label_Insc_Estadual.place(rely=0.48, relx=0.29)
    
        self.entry_Insc_Estadual = Entry(self.aba1, bg= color_label)
        self.entry_Insc_Estadual.place(rely=0.565, relx=0.29, relheight=0.091, relwidth=0.20)

        # Insc. Municipal:
        self.label_Insc_Municipal = Label(self.aba1, text=f"{'Insc'.upper()}. Municipal", bg=color_frame, fg= color_background, font=('arial',10,'bold'))
        self.label_Insc_Municipal.place(rely=0.48, relx=0.53)
    
        self.entry_Insc_Municipal = Entry(self.aba1, bg= color_label)
        self.entry_Insc_Municipal.place(rely=0.565, relx=0.53, relheight=0.091, relwidth=0.20)

    def planilha_frame_2(self):
        # Criando a planilha:
        self.planilha_contatos = tt.Treeview(self.aba3, height=3, columns=('col1', 'col2','col3', 'col4','col5','col6','col7'))

        #Configurando a Planilha:
        estilo = tt.Style(self.frame2)
        estilo.configure("Treeview",
            background = color_buton_press,
            foreground = "white",
            rowheight = 19 ,
            fieldbackground = "#008B8B"
        )
        estilo.map("Treeview",
            background = [("selected", "#48D1CC")]
        )
    
        # Criando as colunas:
        self.planilha_contatos.heading("#0", text='')
        self.planilha_contatos.heading("#1", text='código'.capitalize(), anchor=CENTER)
        self.planilha_contatos.heading("#2", text='nome'.capitalize(), anchor=CENTER)
        self.planilha_contatos.heading('#3', text="cpf".upper(), anchor=CENTER)
        self.planilha_contatos.heading('#4', text="cnpj".upper(), anchor=CENTER)
        self.planilha_contatos.heading("#5", text="telefone".capitalize(), anchor=CENTER)
        self.planilha_contatos.heading('#6', text=f"{'Insc'.upper()}. Municipal", anchor=CENTER)
        self.planilha_contatos.heading("#7", text=f"{'Insc'.upper()}. Estadual", anchor=CENTER)

        # Tamanho das colunas:
        self.planilha_contatos.column('#0', width=0, stretch= NO)
        self.planilha_contatos.column("#1", width=65)
        self.planilha_contatos.column("#2", width=210)
        self.planilha_contatos.column("#3", width=170) 
        self.planilha_contatos.column("#4", width=170)
        self.planilha_contatos.column("#5", width=162)
        self.planilha_contatos.column("#6", width=193)
        self.planilha_contatos.column("#7", width=193)

        # Posicionado a planilha:
        self.planilha_contatos.place(rely=0.05,relx=0.03, relheight=0.7, relwidth=0.9)
    
        # scrol:
        self.scrol_lista = Scrollbar(self.aba3, orient='vertical')
        self.c = self.planilha_contatos
        self.c.configure(yscrollcommand=self.scrol_lista.set)
        self.scrol_lista.place(relx=0.932, rely=0.06, relwidth=0.02, relheight=0.7)
        self.scrol_lista.config(command=self.c.yview)

        self.scrol_lista1 = Scrollbar(self.aba3, orient='horizontal')
        self.c1 = self.planilha_contatos
        self.c1.configure(xscrollcommand=self.scrol_lista1.set)
        self.scrol_lista1.place(rely=0.75, relx=0.03, relwidth=0.70, relheight=0.05)
        self.scrol_lista1.config(command=self.c1.xview)

        # Remover dados com double click:
        self.planilha_contatos.bind("<Double-1>", self.double_click)
    
    def Quit(self): 
        ms2 = msg.askquestion("Aviso: ", 'Deseja sair do App?', icon = 'question')
        if ms2 == 'yes':
         self.ventana_janela.destroy()

    def primeiro_menu(self):
        self.file_menu.add_command(label=" anotações de cliente".title(), background=color_background, foreground='white', command=self.janela_anotaçoes,activebackground=color_buton_press, activeforeground="white")
        self.file_menu.add_command(label= " gerar Ficha do cliente".title(), background=color_background, foreground='white', command=self.final_relatorio, activebackground=color_buton_press, activeforeground="white")
        self.file_menu.add_command(label= " Sair".title(), background=color_background, foreground='white', command= self.Quit, activebackground=color_buton_press, activeforeground="white")

    def segundo_menu(self):
        self.file_menu_2.add_command(label=" buscar cliente pelo código".title(),background=color_background, foreground='white', command=self.buscar_cliente_pelo_Codigo,activebackground=color_buton_press, activeforeground="white")
        self.file_menu_2.add_command(label=" Adicionar novo cliente".title(), background=color_background, foreground='white', command=self.cliente_add,activebackground=color_buton_press, activeforeground="white")
        self.file_menu_2.add_command(label=" Limpar área de seleção".title(), background=color_background, foreground='white', command=self.limpeza_comando,activebackground=color_buton_press, activeforeground="white")
        self.file_menu_2.add_command(label=" apagar cliente".title(), background=color_background, foreground='white', command=self.delete_cliente,activebackground=color_buton_press, activeforeground="white")

    def crédito(self):
        self.janela_anotaçoes()

        #Destroi widget antigos
        self.botao_buscar_2= self.botao_buscar_2.destroy()
        self.botao_limpar_2= self.botao_limpar_2.destroy()
        self.botao_novo_2= self.botao_novo_2.destroy()
        self.botao_apagar_2=  self.botao_apagar_2.destroy()
        self.botao_alterar_2= self.botao_alterar_2.destroy()
        self.label_codigo2 = self.label_codigo2.destroy()
        self.entry_cod2 = self.entry_cod2.destroy()
        self.label_anotações = self.label_anotações.destroy()
        self.entry_anotações = self.entry_anotações.destroy()
        self.listbox = self.listbox.destroy()
        self.scrol_listabox = self.scrol_listabox.destroy()
        self.scrol_listabox2 = self.scrol_listabox2.destroy()
        self.frame3 = self.frame3.destroy()

        # Reconfigura a tela
        self.ventana_janela_2.configure(background= color_frame)
        self.ventana_janela_2.title('Sobre o ANAMA-ITÁ')
        
        #ListaBox
        listbox = Listbox(self.ventana_janela_2) 
        listbox.pack(side = BOTTOM, fill = BOTH) 
        listbox.place(rely=0.02, relx=0.02, relheight=0.92, relwidth=0.90)
        listbox.configure(bg=color_frame, fg="gray", font=('arial',8,'bold'), highlightbackground=color_bord, highlightthickness=2, selectbackground=color_frame)

        # scrol:
        self.scrol_listabox = Scrollbar(self.ventana_janela_2, orient='vertical')
        self.a = listbox
        self.a.configure(yscrollcommand=self.scrol_listabox.set)
        self.scrol_listabox.place(rely=0.04, relx=0.92, relwidth=0.035, relheight=0.9)
        self.scrol_listabox.config(command=self.a.yview)

        self.scrol_listabox2 = Scrollbar(self.ventana_janela_2, orient='horizontal')
        self.b = listbox
        self.b.configure(xscrollcommand=self.scrol_listabox2.set)
        self.scrol_listabox2.place(rely=0.94, relx=0.03, relwidth=0.88, relheight=0.05)
        self.scrol_listabox2.config(command=self.b.xview)

        #Credits
        créditos = str('ANAMA-ITÁ Project'.center(90, ' '))
        c = f"{créditos}{str('**developed by saulo ferro maciel.**message:*This project, as simple as it is,*was made to help my parents!*I hope the little software helps them, because I built it with the intention*to be able to be an agenda exclusive electronics*so they can have more time to write the main lines of code*of my little sisters lives ;-)**about the program:* Its name comes from the Nheengatú language* and means:*  family; friends; people nearby.** your version:*  alpha 0.3.0** languages used:*  python*  sql** Project is using these libraries:*  Tkinter*  Os*  webbrowser*  Sys*  Reportlab*-----------------------------------------------------------**desenvolvido por saulo ferro maciel.**mensagem:*Esse projeto, por mais que simples,*foi feito para ajuda meus pais!*Espero que o pequeno software ajude eles, pois o construí com o intuito*de poder ser uma agenda eletrônica exclusiva*e assim eles poderem ter mais tempo para escrever as principais linhas de código*das vidas das minhas ermãzinhas ;-)**sobre o programa:* O seu nome veem da língua nheengatú* e significa:*  família; familiares; parentes; pessoas próximas.** sua versão:*  alpha 0.3.0** linguagens usadas:*  python*  sql** O projeto está usando estas bibliotecas:*  Tkinter*  Os*  webbrowser*  Sys*  Reportlab').upper()}"
        créditos_lista = c.split('*')

        for credito in créditos_lista:
            listbox.insert(END, credito)

    def terceiro_menu(self):
        self.file_menu_3.add_command(label='anama-itá'.title(),background=color_background,foreground='white', command=self.crédito, activeforeground='white',activebackground=color_buton_press)
    
    def menus_externo(self):
        menu_bar = Menu(self.ventana_janela)
        self.ventana_janela.configure(menu=menu_bar)

        self.file_menu = Menu(menu_bar)
        self.file_menu_2 = Menu(menu_bar)
        self.file_menu_3 = Menu(menu_bar)

        menu_bar.add_cascade(label="Opções", menu= self.file_menu,activebackground=color_buton_press, activeforeground="white")
        menu_bar.add_cascade(label="Sobre", menu= self.file_menu_2,activebackground=color_buton_press, activeforeground="white")
        menu_bar.add_cascade(label='extras'.capitalize(), menu=self.file_menu_3,activebackground=color_buton_press,activeforeground='white')

        self.primeiro_menu()
        self.segundo_menu()
        self.terceiro_menu()
        
Aplicativo()
